---
title: |
   State of the Pandemic
subtitle: " "
   
editor: visual
execute:
  echo: false
  warning: false
  message: false
format: 
  html:
    toc: true
params:
  refreshData: true
  timeframe: Weekly
  username: thq5
---

```{r setup, warning=FALSE, message=FALSE, echo=FALSE}
library(tidyverse)
library(flextable)
library(zoo)
library(scales)
library(officer)
library(png)
library(readxl)
library(lubridate)
library(ggthemes)
library(grid)
library(gridExtra)
library(readr)
library(DBI)
library(glue)
library(ggplot2)
library(webshot2)
library(maps)
library(mapdata)
library(usmap)
library(rlang)
library(shinyjs)

devtools::load_all()


#set the font of the table contents to 10, font type,and the padding
set_flextable_defaults(
  font.size = 10,font.family="Calibri",text.align="center",padding.top=0,padding.bottom=0,padding.left=0,padding.right=0
  )

```

```{r Setup, include=FALSE}
#set source code display, warnings display, messages display, figure size, figure dip
knitr::opts_chunk$set(
  echo = FALSE,
  warning=FALSE,
  message=FALSE,
  fig.width = 20, 
  fig.retina = 10,
  fig.align="center"
 )
#set how small a number must be before scientific notation is used
options(scipen = 100)
```

```{r ggplot_theme}
#set plot format
theme_set(theme_ben())

#read yaml file
#line<-read_lines("C:/Users/thq5/OneDrive - CDC/SAreportR/quartotest/_quarto.yml")
#line<-str_replace_all(line,"NE","AL")
#get params from yaml file
#params=data.frame(i1="1",i2="2")
#for (i in line){
 #   i=str_replace_all(i," ","")
  #  i1=sapply(strsplit(i,":"),'[',1)
   # i2=sapply(strsplit(i,":"),'[',2)
#    params1=data.frame(i1=i1,i2=i2)
 #   params2=rbind(params,params1)
  #  params=params2
#}
#get params from yaml file
#params<-params%>%na.omit()%>%pivot_wider(names_from=i1,values_from=i2)
#modify params
#params$timeframe="Daily"

```

```{r warning=FALSE, message=FALSE, echo=FALSE}
#population data for each jurisdiction
pop <-  readr::read_rds(here::here("data/pop.rds"))
#US population data
us_pop <- 331996199
#get case/death data
raw<-   readr::read_csv(paste0(
        "C:/Users/",
        params$username,
        "/CDC/Situational Awareness COVID-19 Response - WORKING FOLDER/DOMESTIC CASE COUNTS/US CASE COUNTS SPREADSHEET/CDC Final US Case Counts/final_counts_dataset_weekly.csv"),
        guess_max = 3000,
        show_col_types = FALSE)  

#get case/death data join with population data
raw_juris<-raw%>%rename(juris=state_abbr)%>%
    mutate(juris := case_when(
           juris == "MP" ~ "CNMI",
           juris == "VI" ~ "USVI",
           juris == "MH" ~ "RMI",
            TRUE ~ juris)) %>%left_join(pop)%>%select(-fema_region)%>%
    select(-juris_name)%>%rename(Region=fema_region_number)
#get regional sum of case/death data
raw_region<-raw%>%rename(juris=state_abbr)%>%
    mutate(juris := case_when(
           juris == "MP" ~ "CNMI",
           juris == "VI" ~ "USVI",
           juris == "MH" ~ "RMI",
            TRUE ~ juris)) %>%left_join(pop)%>%#select(-fema_region)%>%
    select(-juris_name)%>%rename(Region=fema_region_number)%>%
    group_by(submission_date,Region)%>%
    mutate(state_name=fema_region,juris=fema_region,regiontotalcase=sum(tot_cases),regionconfirmcases=sum(confirmed_cases),regionprocases=sum(prob_cases),regionnewcase=sum(New_case),regionconfirmcase=sum(new_confirmed_cases),regionpnewcase=sum(pnew_case),regiontotaldeath=sum(tot_death),regionconfirmdeath=sum(confirmed_deaths),regionprodeath=sum(prob_death),regionnewdeath=sum(new_death),regionnewconfirmdeath=sum(new_confirmed_deaths),regionpnewdeath=sum(pnew_death),regionhisnewprobdeath=sum(historical_new_prob_deaths),regionhisnewtotaldeath=sum(historical_new_total_deaths),regionhisnewprobcase=sum(historical_new_prob_cases),regionhisnewtotalcase=sum(historical_new_total_cases),regionpop=sum(pop))%>%
    select(state_name,juris,submission_date,regiontotalcase,regionconfirmcases,regionprocases,regionnewcase,regionconfirmcase,regionpnewcase,regiontotaldeath,regionconfirmdeath,regionprodeath,regionnewdeath,regionnewconfirmdeath,regionpnewdeath,regionhisnewprobdeath,regionhisnewtotaldeath,regionhisnewprobcase,regionhisnewtotalcase,regionpop,Region)%>%unique()%>%
    rename(tot_cases=regiontotalcase,confirmed_cases=regionconfirmcases,prob_cases=regionprocases,New_case=regionnewcase,new_confirmed_cases=regionconfirmcase,pnew_case=regionpnewcase,tot_death=regiontotaldeath,confirmed_deaths=regionconfirmdeath,prob_death=regionprodeath,new_death=regionnewdeath,new_confirmed_deaths=regionnewconfirmdeath,pnew_death=regionpnewdeath,historical_new_prob_deaths=regionhisnewprobdeath,historical_new_total_deaths=regionhisnewtotaldeath,historical_new_prob_cases=regionhisnewprobcase,historical_new_total_cases=regionhisnewtotalcase,pop=regionpop)
#get total US case/death sum data
raw_us<-raw%>%rename(juris=state_abbr)%>%
    mutate(juris := case_when(
           juris == "MP" ~ "CNMI",
           juris == "VI" ~ "USVI",
           juris == "MH" ~ "RMI",
            TRUE ~ juris)) %>%left_join(pop)%>%group_by(submission_date)%>%
    mutate(state_name="The United States",juris="US",ustotalcase=sum(tot_cases),usconfirmcases=sum(confirmed_cases),usprocases=sum(prob_cases),usnewcase=sum(New_case),usconfirmcase=sum(new_confirmed_cases),uspnewcase=sum(pnew_case),ustotaldeath=sum(tot_death),usconfirmdeath=sum(confirmed_deaths),usprodeath=sum(prob_death),usnewdeath=sum(new_death),usnewconfirmdeath=sum(new_confirmed_deaths),uspnewdeath=sum(pnew_death),ushisnewprobdeath=sum(historical_new_prob_deaths),ushisnewtotaldeath=sum(historical_new_total_deaths),ushisnewprobcase=sum(historical_new_prob_cases),ushisnewtotalcase=sum(historical_new_total_cases),pop=us_pop,Region="NA")%>%
    select(state_name,juris,submission_date,ustotalcase,usconfirmcases,usprocases,usnewcase,usconfirmcase,uspnewcase,ustotaldeath,usconfirmdeath,usprodeath,usnewdeath,usnewconfirmdeath,uspnewdeath,ushisnewprobdeath,ushisnewtotaldeath,ushisnewprobcase,ushisnewtotalcase,pop,Region)%>%unique()%>%
    rename(tot_cases=ustotalcase,confirmed_cases=usconfirmcases,prob_cases=usprocases,New_case=usnewcase,new_confirmed_cases=usconfirmcase,pnew_case=uspnewcase,tot_death=ustotaldeath,confirmed_deaths=usconfirmdeath,prob_death=usprodeath,new_death=usnewdeath,new_confirmed_deaths=usnewconfirmdeath,pnew_death=uspnewdeath,historical_new_prob_deaths=ushisnewprobdeath,historical_new_total_deaths=ushisnewtotaldeath,historical_new_prob_cases=ushisnewprobcase,historical_new_total_cases=ushisnewtotalcase)

#get combined data
combined_data<-raw_juris%>%rbind(raw_region)%>%rbind(raw_us)
#filter by region
region1_data<-combined_data%>%filter(juris=="Region 1")
#filter by juris
CA<-combined_data%>%filter(juris=="CA")
#filter US
US<-combined_data%>%filter(juris=="US")

case_nat_tbl  <- get_case_death_nat_tbl(username = params$username) |> select(!contains("deaths"))

#case_nat_tbl  <- US |> select(!contains("deaths"))
death_nat_tbl <- get_case_death_nat_tbl(username = params$username) |> select(!contains("cases"))
#death_nat_tbl <- US|> select(!contains("cases"))

hosp_nat_tbl   <- get_hosp_nat_tbl(username = params$username)


lab_nat_tbl    <- get_lab_nat_tbl(username = params$username)

# vaccine data
  vax_raw <- read_excel(paste0("C:/Users/",params$username,"/CDC/Situational Awareness COVID-19 Response - WORKING FOLDER/POWER BI/Data/vaccinations/COVID-TRACKER-AGGREGATES 2022.xlsx"), 
                     sheet = "Trends",
                     skip = 1)  %>%
  filter(date_type == "Report") %>%
  select(-date_type) %>%
  mutate(Date = ymd(Date))
  
# vaccine summary data  
  vax_summary_raw <- read_excel(paste0("C:/Users/",params$username,"/CDC/Situational Awareness COVID-19 Response - WORKING FOLDER/POWER BI/Data/vaccinations/COVID-TRACKER-AGGREGATES 2022.xlsx"), 
                     sheet = "Summary",
                     skip = 1) %>% 
    filter(Location == "US" ) 

# vaccine dempgraphics data
vax_demo_raw <- read_excel(
  paste0("C:/Users/",
         params$username,
         "/CDC/Situational Awareness COVID-19 Response - WORKING FOLDER/POWER BI/Data/vaccinations/COVID-TRACKER-AGGREGATES 2022.xlsx"),
                     sheet = "Demographics",
                     skip = 1) %>%
  mutate(Date = ymd(Date)) %>% 
  filter(Date == max(Date) & Demographic_category %>% str_detect("Ages"))

# population data
population_tbl <- read_excel(paste0("C:/Users/",
                                   params$username,
                                   "/CDC/Situational Awareness COVID-19 Response - WORKING FOLDER/POWER BI/Data/US Census Pop 2019.xlsx"), 
                            sheet = "Combined Population")

```

```{r warning=FALSE, message=FALSE, echo=FALSE}
# get username of user compiling report
username <- Sys.getenv("USERNAME")
tomorrow_date<-format(Sys.Date()+1,format="%A, %B %d, %Y")
today_date<-format(Sys.Date(),format="%b %d, %Y")
# case and death data


# get max date from final counts csv. Should be day prior
 cases_date_raw <- case_nat_tbl %>% 
     filter(cases_date == max(cases_date)) %>% 
     head(1) %>% 
     pull(cases_date) 
 cases_date<-format(cases_date_raw,format="%b %d, %Y")
 hosp_date_raw <- hosp_nat_tbl %>% 
     filter(hosp_date == max(hosp_date)) %>% 
     head(1) %>% 
     pull(hosp_date) 
 hosp_date<-format(hosp_date_raw,format="%b %d, %Y")
 lab_date_raw <- lab_nat_tbl %>% 
     filter(testpos_date == max(testpos_date)) %>% 
     head(1) %>% 
     pull(testpos_date) 
 lab_date<-format(lab_date_raw,format="%b %d, %Y")
 lab_range_start <- format(today()-20, "%b %d, %Y")
 lab_range_end <- format(today()-7, "%b %d, %Y")
 # get start date of lab percent positivity 
 lab_pos_end <- format(today()-9, "%b %d, %Y")
 # case and death data
cases_raw <- read_csv(paste0(
  "C:/Users/",
  username,
  "/CDC/Situational Awareness COVID-19 Response - WORKING FOLDER/DOMESTIC CASE COUNTS/US CASE COUNTS SPREADSHEET/CDC Final US Case Counts/final_counts_dataset_weekly.csv"),
  guess_max = 3000,
  show_col_types = FALSE) %>%
    mutate(submission_date = as.Date(submission_date,format="%m/%d/%Y"))%>%
  filter(submission_date >= ymd("2020-01-22")) %>% 
  mutate(state_abbr = case_when(
    state_abbr == "MP" ~ "CNMI", 
    state_abbr == "VI" ~ "USVI", 
    TRUE ~ state_abbr))


  #get case and death historicals data 
historical_bullets <- cases_raw %>%
   
  replace_na(list(historical_new_total_deaths = 0, 
                  historical_new_total_cases = 0) 
        ) %>%
  mutate(historical_new_total_cases = case_when(
        historical_new_total_cases < 0  ~ 0,
        TRUE ~ historical_new_total_cases)
        ) %>%
  mutate(historical_new_total_deaths = case_when(
        historical_new_total_deaths < 0 ~ 0,
        TRUE ~ historical_new_total_deaths)
        ) %>%
  mutate(tot_hist_case  = sum(historical_new_total_cases),
         tot_hist_death = sum(historical_new_total_deaths)
        ) %>% 
  pivot_longer(cols    =  c(historical_new_total_cases,
                           historical_new_total_deaths),
                names_to = "indicator"
        ) %>%
  mutate(indicator = indicator %>% 
             str_remove("historical_new_total_")
        ) %>%
  select(submission_date,
         state_name,
         state_abbr,
         tot_hist_case,
         tot_hist_death,
         indicator,
         value
        ) %>% 
    group_by(indicator) %>%
  summarize(
    tot_hist     = sum(value),
    today_total  = sum(value[submission_date == today()-1]),
    current_7day = sum(value[submission_date >= as.Date(lubridate::now()) -7]),
    prior_7day = sum(value[submission_date >= as.Date(lubridate::now()) -14 & submission_date <= as.Date(lubridate::now())-8])
           ) %>%
  ungroup() %>%
  mutate(footnote = paste0(
    "Of ",
    format(tot_hist,big.mark   = ","),
    " historical ",
    indicator,
    " reported retroactively, ",
    format(today_total,big.mark   = ","),
    " were reported on the most recent submission date; ",
    format(current_7day,big.mark   = ","),
    " in the current week; and ",
    format(prior_7day,big.mark   = ","),
    " in the prior week.")
    ) %>%
  select(footnote) %>% 
  pull()
```

---
title: |
    CDC COVID-19 Response Update Report DIRECTOR'S EXECUTIVE SUMMARY\
    `r tomorrow_date`
---

US Department of Health and Human Services\
Centers for Disease Control and Prevention

```{r reporting-jurisdictions, echo=FALSE, warning=FALSE, message=FALSE}
# get number of jurisdictions reporting
get_reporting_count <- function(number) {
 number_no_new_counts <-  cases_raw %>% 
                            select(state_name,
                                   state_abbr,
                                   submission_date,
                                   tot_cases,
                                   New_case,
                                   tot_death,
                                   new_death) %>% 
                      filter(submission_date == max(submission_date) & new_death == 0 & New_case == 0) %>% 
                      nrow()
 
 return(60 - number_no_new_counts + number)
}

number_no_report <- get_reporting_count(length(params$zero_report_states))


list_no_report <- cases_raw %>% 
  select(state_name,
         state_abbr,
         submission_date,
         tot_cases,
         New_case,
         tot_death,
         new_death) %>% 
  filter(submission_date == max(submission_date) & new_death == 0 & New_case == 0) %>% 
                      distinct(state_abbr) %>% 
  filter(!state_abbr %in% params$zero_report_states) %>% 
  arrange(state_abbr)
```

# COVID-19 Summary [^1] [^2] [^3]

[^1]: \tiny Time period: Jan 22, 2020 - `r cases_date`; confirmed and probable cases and deaths. Number of jurisdictions reporting: `r number_no_report` of 60. Aggregate case and death data are updated Mon -- Sat. The total of new cases/deaths in the last 24 hours and 7-day averages do not include historical cases/deaths reported retroactively; historical cases/deaths are pending assignment to the appropriate dates. `r historical_bullets[1]` `r historical_bullets[2]`

[^2]: \tiny Time period: Aug 01, 2020 - `r hosp_date`

[^3]: \tiny Includes data for US states, DC, US Territories, federal entities, and pharmacies.

```{r warning=FALSE, message=FALSE, echo=FALSE}
#define flextable align and bold format

#define summary table format

#bind tables
table_bind <- bind_cols(
hosp_nat_tbl|> rename(hosp_daily=hosp_new)|>mutate(hosp_new=rollsum(hosp_daily,7,align="right",fill=NA))|>select(-hosp_daily)|>select(-total_patients)|>filter(hosp_date ==max(hosp_date)), 
case_nat_tbl|>  filter(cases_date==max(cases_date)),
death_nat_tbl |>  filter(deaths_date == max(deaths_date)),
lab_nat_tbl|> filter(testpos_date ==max(testpos_date)))

#format table
table_bind |> mutate(
cases_avg=cases_avg%>%round(0)%>%format(justify = "right", big.mark = ","),
deaths_avg=deaths_avg%>%round(0)%>%format(justify = "right", big.mark = ","),
cases_cum=cases_cum|>format(justify = "right",big.mark   =","),
cases_new=cases_new|>format(justify = "right",big.mark   =","),
deaths_cum=deaths_cum|>format(justify = "right",big.mark   = ","),
deaths_new=deaths_new|>format(justify = "right",big.mark   = ","),
hosp_new=hosp_new|>format(justify = "right",big.mark   = ","),
hosp_avg=hosp_avg|>format(justify = "right",big.mark   = ","))|>
select(ends_with(c("date","cum","new",'avg',"change","7cum"))) |>
create_summary_table() |>subset(select=c(1,2,4,5,6,3))|>
flextable()|>
summary_table_format()|>
align_bold()


```

Source: HHS Protect. Additional information available on [COVID Data Tracker](https://covid.cdc.gov/covid-data-tracker/#cases_casesper100klast7days) and in the [CDC COVID-19 Response Update](https://cdc.sharepoint.com/:f:/s/CPR-Responses/CovidMR/EmXuTs80CQtAgBQK81fzYJkBRwUOc1jgZ3YPa2L4vS6aiA?e=oiWyql)

# COVID-19 Vaccinations in the United States[^4]

[^4]: \tiny Includes data for US states, DC, US Territories, federal entities, and pharmacies.

```{r vaccine-by-age-data, echo=FALSE, warning=FALSE, message=FALSE}
 #get vaccine data groupby by age
vax_age_tbl <- vax_summary_raw %>%
  select(Administered_Dose1_Recip, 
         Administered_Dose1_Recip_5Plus,
         Administered_Dose1_Recip_12Plus,
         Administered_Dose1_Recip_18Plus,
         Administered_Dose1_Recip_65Plus,
         Administered_Dose1_Pop_Pct,
         Administered_Dose1_Recip_5PlusPop_Pct,
         Administered_Dose1_Recip_12PlusPop_Pct,
         Administered_Dose1_Recip_18PlusPop_Pct,
         Administered_Dose1_Recip_65PlusPop_Pct,
         Series_Complete_Yes,
         Series_Complete_Pop_Pct,
         Series_Complete_5Plus,
         Series_Complete_5PlusPop_Pct,
         Series_Complete_12Plus,
         Series_Complete_12PlusPop_Pct,
         Series_Complete_18Plus,
         Series_Complete_18PlusPop_Pct,
         Series_Complete_65Plus,
         Series_Complete_5PlusPop_Pct,
         Series_Complete_65PlusPop_Pct,
         Additional_Doses,
         Additional_Doses_12Plus,                
         Additional_Doses_18Plus,
         Additional_Doses_65Plus,
         Additional_Doses_Vax_Pct,
         Additional_Doses_12Plus_Vax_Pct,
         Additional_Doses_18Plus_Vax_Pct,
         Additional_Doses_65Plus_Vax_Pct,
         Second_Booster,
         Second_Booster_12Plus,
         Second_Booster_18Plus,
         Second_Booster_65Plus,
         Second_Booster_Vax_Pct, 
         Second_Booster_12Plus_Vax_Pct,
         Second_Booster_18Plus_Vax_Pct,
         Second_Booster_65Plus_Vax_Pct) %>% 
  pivot_longer(everything()) %>%  
  mutate(dose     = case_when(
                        name %>% str_detect("Dose1")            ~ "Dose1",
                        name %>% str_detect("Series_Complete")  ~ "FullyVaxx",
                        name %>% str_detect("Additional_Doses") ~ "Booster1",
                        name %>% str_detect("Second_Booster")   ~ "Booster2",
                        TRUE  ~ name),
         metric    = case_when(
                        name %>% 
                          str_to_lower() %>%  
                          str_detect("pop|pct") ~ "pct",
                        TRUE                    ~ "count"),
         age_group = case_when(
                        name %>% str_detect("65Plus") ~ "≥65 Years",
                        name %>% str_detect("5Plus")  ~ "≥5 Years",
                        name %>% str_detect("12Plus") ~ "≥12 Years",
                        name %>% str_detect("18Plus") ~ "≥18 Years",
                        TRUE ~ "US Overall"
         )) %>%
  select(-name) %>% 
  pivot_wider(names_from = c("dose", "metric"))
 # get US Overall vaccine data and format it
summary_text_numbers <- vax_age_tbl %>% 
  filter(age_group == "US Overall") %>% 
  select(Dose1_count, Dose1_pct) %>% 
  mutate(Dose1_count = number(Dose1_count, scale = .000001 ,accuracy =  .1))
 # get the total number and percentage of the vaccinated people
summary_text_total <- summary_text_numbers$Dose1_count
summary_text_pct <- summary_text_numbers$Dose1_pct
 # get numbers of 12-17 and 5-11 ages of people vaccinated
vax_minors_tbl <- vax_demo_raw %>%
  select(Demographic_category,
         Administered_Dose1,
         Administered_Dose1_pct_agegroup,
         Series_Complete_Yes,
         Series_Complete_Pop_pct_agegroup,
         Booster_Doses_Yes,
         Booster_Doses_Vax_pct_agegroup ) %>% 
  filter(Demographic_category %>% str_detect("12-17|5-11")) %>% 
  rename(Dose1_count     = Administered_Dose1,
         Dose1_pct       = Administered_Dose1_pct_agegroup,
         FullyVaxx_count = Series_Complete_Yes,
         FullyVaxx_pct   = Series_Complete_Pop_pct_agegroup,
         Booster1_count  = Booster_Doses_Yes,
         Booster1_pct    = Booster_Doses_Vax_pct_agegroup) %>% 
  mutate(FullyVaxx_pct = FullyVaxx_pct %>% as.numeric(),
         Dose1_pct   = Dose1_pct %>% as.numeric()) %>% 
  mutate( age_group = Demographic_category %>% 
           str_remove("Ages_") %>% 
           str_replace("_yrs", " Years") 
         ) %>% 
  select(-Demographic_category)

  # combine 2 vaccine tables and format it
  vax_all_age_data <- vax_age_tbl %>% 
    full_join(vax_minors_tbl) %>% 
    mutate(age_group = age_group %>% factor(c("US Overall",
                                              "5-11 Years",
                                              "12-17 Years",
                                              "≥5 Years",
                                              "≥12 Years",
                                              "≥18 Years",
                                              "≥65 Years"))) %>% 
    arrange(age_group) %>% 
    mutate(Dose1_chr  = Dose1_count %>%  format(big.mark=","),
           Full_chr   = FullyVaxx_count %>%  format(big.mark=","),
           Boost1_chr = Booster1_count %>%  format(big.mark=","),
           Boost2_chr = Booster2_count %>%  format(big.mark=","),
           Dose1_pct  = (Dose1_pct /100) %>% percent(accuracy = .1),
           FullyVaxx_pct = (FullyVaxx_pct /100) %>% percent(accuracy = .1),
           Booster1_pct  = (Booster1_pct /100) %>% percent(accuracy = .1),
           Booster2_pct  = (Booster2_pct /100) %>% percent(accuracy = .1))
  
  
```

**Over `r summary_text_total` million people or `r summary_text_pct`% of the population have received at least 1 dose.**[^5] [^6]

[^5]: \tiny Currently, only those 50 and older are eligible for 2nd additional doses.

[^6]: \tiny Due to the inclusion of single dose and two-dose vaccines in Fully Vaccinated counts and because some doses lack information on dose type (First Dose, Fully Vaccinated, Additional Dose), the sum of the percentages may not equal 100%.

```{r vaccine-by-age-tbl, echo=FALSE, warning=FALSE, message=FALSE}

#| tbl-cap: "vaccine-by-age-tbl"

# get the first vaccine table
vax_all_age_tbl <- vax_all_age_data %>%
    mutate(Dose1    = glue("{Dose1_pct}(N={Dose1_chr})"),
           FullyVaxx = glue("{FullyVaxx_pct}(N={Full_chr})"),
           Booster1  = if_else(age_group%>%str_detect("5-11"),"N/A",as.character(glue("{Booster1_pct}(N={Boost1_chr})"))),
           Booster2  = if_else(age_group %>%
                                 str_detect("5-11|12-17|≥5"),
                               "N/A",
                               as.character(glue("{Booster2_pct}(N={Boost2_chr})")))
    ) %>% 
    flextable(col_keys = c("age_group",
                           "Dose1",
                           "FullyVaxx",
                           "Booster1",
                           "Booster2")) %>% 
    
    set_header_labels(age_group = "Age Group",
                      Dose1     = "Received at Least 1 Dose",
                      FullyVaxx = "Fully Vaccinated",
                      Booster1  = "Received 1st Booster/Additional Dose",
                      Booster2  = "Received 2nd Booster/Additional Dose"
                      )
#format the first vaccine table
vax_all_age_tbl<-vaccine_age_table_format(vax_all_age_tbl)
#add superscript

#align and bold
vax_all_age_tbl<-align_bold(vax_all_age_tbl)

```

```{r echo=FALSE, warning=FALSE, message=FALSE}
vax_all_age_tbl
```

```{r vaccine-trends, echo=FALSE, warning=FALSE, error = FALSE, message=FALSE}
#| tbl-cap: "vaccine-trends"

 # get total vaccination data
vax_overall_doses <- vax_raw %>% 
  filter(Date == max(Date)) %>% 
  filter(Location == "US") %>%
  select(Administered_Daily) %>% 
  pull()

 # get daily total vaccination data
adm_daily_total <- vax_raw %>% 
  filter(Date == max(Date) & Location == "US") %>% 
  select(Administered_Daily) %>% 
  pull()
  
 #get the second vaccine table
vax_trends_tbl <- vax_raw %>% 
  filter(Date == max(Date) | Date == max(Date)-7) %>% 
  filter(Location == "US") %>% 
  select(Date, 
         Administered,
         Administered_Daily,
         Administered_7_Day_Rolling_Average,
         Admin_Dose_1_Cumulative, 
         Admin_Dose_1_Daily,
         Admin_Dose_1_Day_Rolling_Average,
         Series_Complete_Cumulative,
         Series_Complete_Daily,
         Series_Complete_Day_Rolling_Average,
         Booster_Cumulative,
         Booster_Daily, 
         Booster_7_Day_Rolling_Average) %>% 
  rename(Overall_cum     = Administered,
         Overall_daily   = Administered_Daily,
         Overall_avg     = Administered_7_Day_Rolling_Average,
         FirstDose_cum   = Admin_Dose_1_Cumulative, 
         FirstDose_daily = Admin_Dose_1_Daily,
         FirstDose_avg   = Admin_Dose_1_Day_Rolling_Average,
         FullyVax_cum    = Series_Complete_Cumulative,
         FullyVax_daily  = Series_Complete_Daily,
         FullyVax_avg    = Series_Complete_Day_Rolling_Average,
         Booster_cum     = Booster_Cumulative,
         Booster_daily   =  Booster_Daily, 
         Booster_avg     =  Booster_7_Day_Rolling_Average) %>% 
  pivot_longer(cols             = contains("_"),
               names_to         = "indicator",
               values_to        = "val", 
               values_transform = list(val = as.character)) %>% 
  separate(indicator, c("indicator", "metric"), sep="_") %>% 
  pivot_wider(names_from = metric, values_from = val) %>% 
   mutate(Date_label = case_when(
    Date == max(Date) ~ "cur_avg",
    TRUE ~ "prev_avg"
  )) %>% 
  mutate(indicator = case_when(
    indicator == "Overall" ~ "Dose Administered",
    indicator == "FirstDose" ~ "1st Dose", 
    indicator == "FullyVax" ~ "Fully Vaccinated", 
    indicator == "Booster" ~ "1st Additional Dose",
    TRUE ~ "NA")) %>%
  mutate(indicator = indicator %>% 
           factor(levels = c("Dose Administered",
                             "1st Dose", 
                             "Fully Vaccinated", 
                             "1st Additional Dose"))
           ) %>% 
  pivot_wider(names_from = Date_label,
              values_from = avg) %>% 
  group_by(indicator) %>% 
  fill(prev_avg) %>% 
  ungroup() %>% 
  filter(Date == max(Date)) %>% 
  mutate(across(3:6, as.numeric)) %>% 
  mutate(pct_change = (cur_avg - prev_avg) / prev_avg) %>% 
  mutate(adm_pct = case_when(
    indicator %>% str_detect("Admin") ~ "N/A",
    TRUE ~ (daily / adm_daily_total) %>% percent(accuracy = .1)
   )) %>% 
  mutate(across(3:6, comma)) %>%
  mutate(pct_change = percent(pct_change, accuracy = .1) )%>% 
  mutate(daily = glue("{daily} ({adm_pct})")) %>% 
  
  select(indicator, cum, daily, cur_avg, prev_avg, pct_change) %>%
   flextable() %>%
   set_header_labels(cum        = "Cumulative Total",
                     daily      ="Daily (% of Doses Administered)^",
                     cur_avg    = "Current 7-Day Daily Average",
                     prev_avg   ="Prior 7-Day Daily Average",
                     pct_change = "Percent Change") 

  vax_date <- vax_raw  %>% arrange(desc(Date)) %>% head(1)  %>% pull(Date) %>% format("%B %d, %Y")
  
#format the second vaccine table
vax_trends_tbl<-vaccine_trend_table_format(vax_trends_tbl)
  #add superscript
  
#align and bold
vax_trends_tbl<-align_bold(vax_trends_tbl)

```

```{r echo=FALSE, warning=FALSE, message=FALSE}
vax_trends_tbl
```

Data as of `r vax_date`, 06:00 ET \| Sources: Data Monitoring and Reporting Section, Vaccine Task Force; CDC COVID Tracker

```{r}

cases_date_raw<-case_nat_tbl%>%filter(cases_date==max(cases_date,na.rm=TRUE))%>%pull(cases_date)
cases_date_peak<-format(cases_date_raw, format="%Y-%m-%d")
cases_date_peak_41<-format(cases_date_raw-41, format="%Y-%m-%d")
cases_Bdate<-format(cases_date_raw, format="%B %d, %Y")
cases_date<-format(cases_date_raw,format="%b %d, %Y")
cases_date_6<-format(cases_date_raw-6,format="%b %d, %Y")
cases_date_7<-format(cases_date_raw-7,format="%b %d, %Y")
cases_date_13<-format(cases_date_raw-13,format="%b %d, %Y")

casetitle<-data.frame(title=if_else(params$timeframe=="Monthly","Monthly Change in COVID-19 Cases, US", "Weekly Change in COVID-19 Cases, US"),subtitle=glue("January 22, 2020 - {cases_Bdate}"))%>%
pivot_longer( cols = everything(),
                 names_to = "names",
                values_to = "val", 
               values_transform = list(val = as.character))%>%
select(val)%>%flextable()
#format case title table
casetitle<-title_table_format(casetitle)                                   

cases_epicurve<-case_nat_tbl%>%
    mutate(cases_prior_avg= lag(cases_avg,order_by = cases_date,1)%>% round(0))

#format case numbers data
cases_numbers<-cases_epicurve%>%filter(cases_date==max(cases_date,na.rm=TRUE))%>%
    select(-cases_7cum)%>%
mutate(
#format numbers 
cases_cum = cases_cum %>% format( big.mark = ","),
cases_new = cases_new%>%format(justify="right",big.mark=","),
cases_avg = cases_avg%>%round(0)%>%format(justify="right",big.mark=","),
cases_prior_avg=label_number(big.mark=",",accuracy=1)(cases_prior_avg)     )


#input peak start date and end date to get data of each peak
casepeak1<-peak_format(case_nat_tbl,"2020-03-19","2020-06-19")
casepeak2<-peak_format(case_nat_tbl,"2020-06-20","2020-09-21")
casepeak3<-peak_format(case_nat_tbl,"2020-12-21","2021-03-19")
casepeak4<-peak_format(case_nat_tbl,"2021-03-20","2021-06-19")
casepeak5<-peak_format(case_nat_tbl,"2021-06-20","2021-09-30")
casepeak6<-peak_format(case_nat_tbl,"2021-12-22","2022-03-20")
casepeak7<-peak_format(case_nat_tbl,"2022-06-21","2022-09-22")
casepeak8<-peak_format(case_nat_tbl,cases_date_peak_41,cases_date_peak)

casepeakline1<-peak_number(case_nat_tbl,"2020-03-19","2020-06-19")
casepeakline2<-peak_number(case_nat_tbl,"2020-06-20","2020-09-21")
casepeakline3<-peak_number(case_nat_tbl,"2020-12-21","2021-03-19")
casepeakline4<-peak_number(case_nat_tbl,"2021-03-20","2021-06-19")
casepeakline5<-peak_number(case_nat_tbl,"2021-06-20","2021-09-30")
casepeakline6<-peak_number(case_nat_tbl,"2021-12-22","2022-03-20")
casepeakline7<-peak_number(case_nat_tbl,"2022-06-21","2022-09-22")


#combine each peak data to get case peak flextable
casepeak_raw<-casepeak1%>%rbind(casepeak2)%>%rbind(casepeak3)%>%
rbind(casepeak4)%>%rbind(casepeak5)%>%rbind(casepeak6)%>%rbind(casepeak7)#%>%rbind(casepeak8)
casepeak<-(data.frame(c("2020 - Spring","2020 - Summer","2020 - Winter","2021 - Spring","2021 - Summer","2021 - Winter","2022 - Summer")))%>%
        cbind(casepeak_raw)
column1<-(data.frame(c("1","2",cases_numbers$cases_avg,"3","Current 7-Day Average",glue("{cases_date_6} - {cases_date}")," ")))
column2<-(data.frame(c("1","2",cases_numbers$cases_prior_avg,"3","Prior 7-Day Average",glue("{cases_date_13} - {cases_date_7}")," ")))
column3<-(data.frame(c("1","2",cases_numbers$cases_change,"3","Change in 7-Day Average"," "," ")))
casepeak<-column1%>%cbind(column2)%>%cbind(column3)%>%cbind(casepeak)
case_numbers_peak<-numbers_list_new_format_exsum(cases_numbers,casepeak,"Cases")

#get monthly case data
cases_monthly_epicurve <- case_nat_tbl%>%
group_by(month=lubridate::floor_date(cases_date,'month'))%>%
mutate(cases_cummonth=sum(cases_new))%>%select(month,cases_cummonth)%>%
rename(cases_date=month,cases_new=cases_cummonth)%>%ungroup()%>%unique()

#define case plot function
casedaily_weekly_monthly_plot<-function(timeframe){
    if(timeframe=="Weekly"|timeframe=="Daily"){
plot_exsum(cases_epicurve,"Cases","Weekly","#573B92")+
            geom_segment(aes(x={casepeakline1$date},xend={casepeakline1$date},y=0,yend=max(cases_epicurve$cases_new)*1.3),linetype="dashed",color="grey")+
        geom_segment(aes(x={casepeakline2$date},xend={casepeakline2$date},y=0,yend=max(cases_epicurve$cases_new)*1.3),linetype="dashed",color="grey")+
        geom_segment(aes(x={casepeakline3$date},xend={casepeakline3$date},y=0,yend=max(cases_epicurve$cases_new)*1.3),linetype="dashed",color="grey")+
        geom_segment(aes(x={casepeakline4$date},xend={casepeakline4$date},y=0,yend=max(cases_epicurve$cases_new)*1.3),linetype="dashed",color="grey")+
        geom_segment(aes(x={casepeakline5$date},xend={casepeakline5$date},y=0,yend=max(cases_epicurve$cases_new)*1.3),linetype="dashed",color="grey")+
        geom_segment(aes(x={casepeakline6$date},xend={casepeakline6$date},y=0,yend=max(cases_epicurve$cases_new)*1.3),linetype="dashed",color="grey")+
        geom_segment(aes(x={casepeakline7$date},xend={casepeakline7$date},y=0,yend=max(cases_epicurve$cases_new)*1.3),linetype="dashed",color="grey")+
            annotate("text",x={casepeakline1$date}+40,y=max(cases_epicurve$cases_new),label=glue("{casepeakline1$dateformat}"),size=3.5)+
        annotate("text",x={casepeakline2$date}+40,y=max(cases_epicurve$cases_new),label=glue("{casepeakline2$dateformat}"),size=3.5)+
        annotate("text",x={casepeakline3$date}+40,y=max(cases_epicurve$cases_new),label=glue("{casepeakline3$dateformat}"),size=3.5)+
        annotate("text",x={casepeakline4$date}+40,y=max(cases_epicurve$cases_new),label=glue("{casepeakline4$dateformat}"),size=3.5)+
        annotate("text",x={casepeakline5$date}+40,y=max(cases_epicurve$cases_new),label=glue("{casepeakline5$dateformat}"),size=3.5)+
        annotate("text",x={casepeakline6$date}+40,y=max(cases_epicurve$cases_new),label=glue("{casepeakline6$dateformat}"),size=3.5)+
        annotate("text",x={casepeakline7$date}+40,y=max(cases_epicurve$cases_new),label=glue("{casepeakline7$dateformat}"),size=3.5)
   }
   else if(timeframe=="Monthly"){
plot_exsum(cases_monthly_epicurve,"Cases","Monthly","#573B92")
   }
 }
#create case plot
caseplot<-casedaily_weekly_monthly_plot(params$timeframe)
#plot case numbers

```

```{r}
casetitle
case_numbers_peak
caseplot
```

```{r hospital,warning=FALSE, message=FALSE, echo=FALSE}

hosp_date_raw<-hosp_nat_tbl%>%filter(hosp_date==max(hosp_date))%>%pull(hosp_date)
hosp_Bdate<-format(hosp_date_raw,format="%B %d, %Y")
hosptitle<-data.frame(title="New Admission of Patients with Confirmed COVID-19, United States",subtitle=glue("August 01, 2020 - {hosp_Bdate}"))%>%
pivot_longer( cols = everything(),
                 names_to = "names",
                values_to = "val", 
               values_transform = list(val = as.character))%>%
select(val)%>%flextable()
hosptitle<-title_table_format(hosptitle) 
#get hospital data
hosp_epicurve <- hosp_nat_tbl %>%select(-hosp_cum)%>% filter(hosp_date<=max(hosp_date,na.rm=TRUE)) %>% mutate(
    hosp_cum=sum(hosp_new),
#weekly admissions
hosp_cum7 =(rollsum(hosp_new,7,align = "right", fill = NA)) ,
#prior 7 day avg admission
hosp_prior_avg7 = lag(hosp_avg,order_by = hosp_date, 7),
#14 day avg admission
hosp_avg21 = rollmean(hosp_new,21,align = "right", fill = NA)%>% round(0),
#prior 14 day avg admission
hosp_prior_avg21=lag(hosp_avg21,order_by = hosp_date,21)%>% round(0),
#percent change of 14 day avg admission
hosp_change21  = (hosp_avg21 - hosp_prior_avg21)/hosp_prior_avg21
        ) 

hosp_numbers<-hosp_epicurve %>%filter(hosp_date==max(hosp_date,na.rm=TRUE))%>%select(-hosp_7cum)%>%
mutate(
#format number
hosp_cum = hosp_cum %>% format(justify = "right",big.mark = ","),
hosp_cum7 = hosp_cum7 %>% format(justify = "right",big.mark = ","),
hosp_new = hosp_new%>%format(justify="right",big.mark=","),
hosp_avg=label_number(big.mark=",",accuracy=1)(hosp_avg),
hosp_avg21=label_number(big.mark=",",accuracy=1)(hosp_avg21),
hosp_prior_avg7=label_number(big.mark=",",accuracy=1)(hosp_prior_avg7),
hosp_prior_avg21=label_number(big.mark=",",accuracy=1)(hosp_prior_avg21),
hosp_change21=label_percent(decimal.mark=".",accuracy = .1)(hosp_change21)
       )  

hosp_weekly_epicurve <- hosp_epicurve%>%
    filter(wday(hosp_date)==4)%>%select(hosp_date,hosp_cum7,hosp_avg21,hosp_prior_avg21,hosp_change21)%>%rename(hosp_new=hosp_cum7)
hosp_weekly_numbers<-hosp_numbers%>%select(hosp_date,hosp_cum,hosp_cum7,hosp_avg21,hosp_prior_avg21,hosp_change21)%>%rename(hosp_new=hosp_cum7)
#define hospital number list function
hosp_numbers_list<-function(timeframe){
if (timeframe=="Daily"){
   numbers_exsum(hosp_numbers,"Daily","Admissions")}

else if (timeframe=="Weekly"|timeframe=="Monthly"){
    numbers_exsum(hosp_weekly_numbers,"Weekly","Admissions")}
}
#create hospital numbers list
hosp_numbers_list<-hosp_numbers_list(params$timeframe)
#format hospital numbers list and save the image
hosp_numbers_list<-numbers_list_format_exsum(hosp_numbers_list)
hospnumbersimg<-save_as_image(hosp_numbers_list,path="../../resources/images/hospnumbers.png",webshot="webshot2")
hospnumbersimg<-readPNG("../../resources/images/hospnumbers.png")
hospnumbers<-rasterGrob(hospnumbersimg)

#create hospital weekly data


#define hospital peaks function
hosp_peaks_list<-function(timeframe){
  if (timeframe=="Daily"){
#input peak start date and end date to get data of each peak
hosppeak1<-hosp_peak(hosp_epicurve,"2021-01-01","2021-06-30")
hosppeak2<-hosp_peak(hosp_epicurve,"2021-07-01","2021-10-31")
hosppeak3<-hosp_peak(hosp_epicurve,"2021-11-01","2022-08-05")

#combine each peak and create hospital peak table
hosppeak<-hosppeak1%>%rbind(hosppeak2)%>%rbind(hosppeak3)
hosppeak<-(data.frame(c("1st Peak","2nd Peak","Latest Peak")))%>%
    cbind(hosppeak)%>%flextable()
hosppeak<-add_header_row(x=hosppeak,top=TRUE,values=c("s","Single Day","s","7-Day Daily Average"),colwidths=c(1,2,1,2))
hosppeak<-add_header_row(x=hosppeak,top=TRUE,values=c("Peaks in New Admissions and Highest -Day Moving Average"),colwidths=c(6))

return(hosppeak)  
  }
else if(timeframe=="Weekly"|timeframe=="Monthly"){
#input peak start date and end date to get data of each peak
hosppeak1<-hosp_peak(hosp_weekly_epicurve,"2021-01-01","2021-06-30")
hosppeak2<-hosp_peak(hosp_weekly_epicurve,"2021-07-01","2021-10-31")
hosppeak3<-hosp_peak(hosp_weekly_epicurve,"2021-11-01","2022-08-05")
#combine each peak and create hospital peak table
hosppeak<-hosppeak1%>%rbind(hosppeak2)%>%rbind(hosppeak3)
hosppeak<-(data.frame(c("1st Peak","2nd Peak","Latest Peak")))%>%
    cbind(hosppeak)%>%flextable()
hosppeak<-add_header_row(x=hosppeak,top=TRUE,values=c("s","Single Week","s","21-Day Daily Average"),colwidths=c(1,2,1,2))
hosppeak<-add_header_row(x=hosppeak,top=TRUE,values=c("Peaks in New Admissions and Highest 21-Day Moving Average"),colwidths=c(6))
return(hosppeak)
  }   
}

#create hospital peak table
hosppeak<-hosp_peaks_list(params$timeframe)

hosppeak<-hosppeaks_format(hosppeak)

hosp_monthly_epicurve <- hosp_epicurve%>%
group_by(month=lubridate::floor_date(hosp_date,'month'))%>%
mutate(hosp_cummonth=sum(hosp_new))%>%select(month,hosp_cummonth)%>%rename(hosp_date=month,hosp_new=hosp_cummonth)%>%ungroup()%>%unique()

 #define hospital plot function
 hospdaily_weekly_monthly_plot<-function(timeframe){
 if(timeframe=="Daily"){
     plot_exsum(hosp_epicurve,"Admissions","Daily","#F5793A")+
          geom_line(aes(y=hosp_avg,group=1,color=glue("7-Day Average Admissions    ")),size=1.3)+
         #set color of 21 day avg line
        scale_color_manual(" ",values="#12239E")
#daily_hosp_plot_exsum(hosp_epicurve)
   }
 else if(timeframe=="Weekly"){
      plot_exsum(hosp_weekly_epicurve,"Admissions","Weekly","#F5793A")+
          geom_line(aes(y=hosp_avg21*7,group=1,color=glue("21-Day Average Admissions    ")),size=1.3)+
         #set color of 21 day avg line
        scale_color_manual(" ",values="#12239E")
#weekly_hosp_plot_exsum(hosp_weekly_epicurve)
   }
 else if(timeframe=="Monthly"){
      plot_exsum(hosp_monthly_epicurve,"Admissions","Monthly","#F5793A")
#get monthly admissions data
     #monthly_plot_exsum(hosp_monthly_epicurve,"Admissions","#F5793A")
   }
 }
#create hospital plot
hospplot<-hospdaily_weekly_monthly_plot(params$timeframe)
#plot case numbers
hospnumbersplot<-ggplot()+theme_void()+ 
    annotation_custom(hospnumbers,xmin=-Inf,xmax=Inf,ymin=-Inf,ymax=Inf)
#plot final case epicurve chart
hospfinalplot<-cowplot::plot_grid(hospnumbersplot,hospplot,ncol=2,rel_widths=c(1,3))

```

```{r warning=FALSE, message=FALSE, echo=FALSE}
hosptitle
hosppeak
hospfinalplot
```

```{r death,warning=FALSE, message=FALSE, echo=FALSE}
#| tbl-cap: "death"

deaths_date_raw<-death_nat_tbl%>%filter(deaths_date==max(deaths_date,na.rm=TRUE))%>%pull(deaths_date)
deaths_date_peak<-format(deaths_date_raw, format="%Y-%m-%d")
deaths_date_peak_41<-format(deaths_date_raw-41, format="%Y-%m-%d")
deaths_Bdate<-format(deaths_date_raw, format="%B %d, %Y")
deaths_date<-format(deaths_date_raw,format="%b %d, %Y")
deaths_date_6<-format(deaths_date_raw-6,format="%b %d, %Y")
deaths_date_7<-format(deaths_date_raw-7,format="%b %d, %Y")
deaths_date_13<-format(deaths_date_raw-13,format="%b %d, %Y")

deathtitle<-data.frame(title=if_else(params$timeframe=="Monthly","Monthly Change in COVID-19 Deaths, US", "Weekly Change in COVID-19 Deaths, US"),subtitle=glue("January 22, 2020 - {deaths_Bdate}"))%>%
pivot_longer( cols = everything(),
                 names_to = "names",
                values_to = "val", 
               values_transform = list(val = as.character))%>%
select(val)%>%flextable()
#format death title table
deathtitle<-title_table_format(deathtitle)                                   

deaths_epicurve<-death_nat_tbl%>%
    mutate(deaths_prior_avg= lag(deaths_avg,order_by = deaths_date,1)%>% round(0))

#format death numbers data
deaths_numbers<-deaths_epicurve%>%
    filter(deaths_date==max(deaths_date,na.rm=TRUE))%>%
    select(-deaths_7cum)%>%
mutate(
#format number
deaths_cum = deaths_cum %>% format( big.mark = ","),
deaths_new = deaths_new%>%format(justify="right",big.mark=","),
deaths_avg = deaths_avg%>%round(0)%>%format(justify="right",big.mark=","),
deaths_prior_avg=label_number(big.mark=",",accuracy=1)(deaths_prior_avg)
     )

#input peak start date and end date to get data of each peak
deathpeak1<-peak_format(death_nat_tbl,"2020-03-19","2020-06-19")
deathpeak2<-peak_format(death_nat_tbl,"2020-06-20","2020-09-21")
deathpeak3<-peak_format(death_nat_tbl,"2020-12-21","2021-03-19")
deathpeak4<-peak_format(death_nat_tbl,"2021-06-20","2021-09-30")
deathpeak5<-peak_format(death_nat_tbl,"2021-12-22","2022-03-20")
deathpeak6<-peak_format(death_nat_tbl,"2022-06-21","2022-09-22")
deathpeak7<-peak_format(death_nat_tbl,deaths_date_peak_41,deaths_date_peak)

deathpeakline1<-peak_number(death_nat_tbl,"2020-03-19","2020-06-19")
deathpeakline2<-peak_number(death_nat_tbl,"2020-06-20","2020-09-21")
deathpeakline3<-peak_number(death_nat_tbl,"2020-12-21","2021-03-19")
deathpeakline4<-peak_number(death_nat_tbl,"2021-06-20","2021-09-30")
deathpeakline5<-peak_number(death_nat_tbl,"2021-12-22","2022-03-20")
deathpeakline6<-peak_number(death_nat_tbl,"2022-06-21","2022-09-22")


#combine each peak and get death peak flextable
deathpeak_raw<-deathpeak1%>%rbind(deathpeak2)%>%rbind(deathpeak3)%>%rbind(deathpeak4)%>%rbind(deathpeak5)%>%rbind(deathpeak6)#%>%rbind(deathpeak7)
deathpeak<-(data.frame(c("2020 - Spring","2020 - Summer","2020 - Winter","2021 - Summer","2021 - Winter","2022 - Summer")))%>%cbind(deathpeak_raw)

column1<-(data.frame(c("1","2",deaths_numbers$deaths_avg,"3","Current 7-Day Average",glue("{deaths_date_6} - {deaths_date}"))))
column2<-(data.frame(c("1","2",deaths_numbers$deaths_prior_avg,"3","Prior 7-Day Average",glue("{deaths_date_13} - {deaths_date_7}"))))
column3<-(data.frame(c("1","2",deaths_numbers$deaths_change,"3","Change in 7-Day Average"," ")))
deathpeak<-column1%>%cbind(column2)%>%cbind(column3)%>%cbind(deathpeak)
death_numbers_peak<-numbers_list_new_format_exsum(deaths_numbers,deathpeak,"Deaths")



#get monthly deaths data
     deaths_monthly_epicurve <- death_nat_tbl%>%
group_by(month=lubridate::floor_date(deaths_date,'month'))%>%
mutate(deaths_cummonth=sum(deaths_new))%>%select(month,deaths_cummonth)%>%
rename(deaths_date=month,deaths_new=deaths_cummonth)%>%ungroup()%>%unique()
#define death plot function
deathdaily_weekly_monthly_plot<-function(timeframe){
   if(timeframe=="Weekly"|timeframe=="Daily"){
       deathplot<-plot_exsum(deaths_epicurve,"Weekly","Deaths","#08519C")+
            geom_segment(aes(x={deathpeakline1$date},xend={deathpeakline1$date},y=0,yend=max(deaths_epicurve$deaths_new)*1.3),linetype="dashed",color="grey")+
         geom_segment(aes(x={deathpeakline2$date},xend={deathpeakline2$date},y=0,yend=max(deaths_epicurve$deaths_new)*1.3),linetype="dashed",color="grey")+
        geom_segment(aes(x={deathpeakline3$date},xend={deathpeakline3$date},y=0,yend=max(deaths_epicurve$deaths_new)*1.3),linetype="dashed",color="grey")+
        geom_segment(aes(x={deathpeakline4$date},xend={deathpeakline4$date},y=0,yend=max(deaths_epicurve$deaths_new)*1.3),linetype="dashed",color="grey")+
        geom_segment(aes(x={deathpeakline5$date},xend={deathpeakline5$date},y=0,yend=max(deaths_epicurve$deaths_new)*1.3),linetype="dashed",color="grey")+
        geom_segment(aes(x={deathpeakline6$date},xend={deathpeakline6$date},y=0,yend=max(deaths_epicurve$deaths_new)*1.3),linetype="dashed",color="grey")+
         annotate("text",x={deathpeakline1$date}+40,y=max(deaths_epicurve$deaths_new),label=glue("{deathpeakline1$dateformat}"),size=3.5)+
        annotate("text",x={deathpeakline2$date}+40,y=max(deaths_epicurve$deaths_new),label=glue("{deathpeakline2$dateformat}"),size=3.5)+
        annotate("text",x={deathpeakline3$date}+40,y=max(deaths_epicurve$deaths_new),label=glue("{deathpeakline3$dateformat}"),size=3.5)+
        annotate("text",x={deathpeakline4$date}+40,y=max(deaths_epicurve$deaths_new),label=glue("{deathpeakline4$dateformat}"),size=3.5)+
        annotate("text",x={deathpeakline5$date}+40,y=max(deaths_epicurve$deaths_new),label=glue("{deathpeakline5$dateformat}"),size=3.5)+
        annotate("text",x={deathpeakline6$date}+40,y=max(deaths_epicurve$deaths_new),label=glue("{deathpeakline6$dateformat}"),size=3.5)
#weekly_death_plot_exsum(death_nat_tbl)
   }
   else if(timeframe=="Monthly"){
plot_exsum(deaths_monthly_epicurve,"Monthly","Deaths","#08519C")    
   }
 }
#create death plot
deathplot<-deathdaily_weekly_monthly_plot(params$timeframe)



```

```{r warning=FALSE, message=FALSE, echo=FALSE}
deathtitle
death_numbers_peak
deathplot
```

```{r lab,warning=FALSE, message=FALSE, echo=FALSE }
#| tbl-cap: "lab"

#get lab dates
lab_Bdate<-format(Sys.Date()-3,format="%B %d, %Y")
lab_date_raw<-Sys.Date()-3
lab_date<-format(lab_date_raw,format="%b %d, %Y")
labtitle<-data.frame(title="Daily SARS-CoV-2 NAAT Percent Test Positivity and Test Volume, United States",subtitle=glue("March 01, 2020 - {lab_Bdate}"))%>%
pivot_longer( cols = everything(),
                 names_to = "names",
                values_to = "val", 
               values_transform = list(val = as.character))%>%
select(val)%>%flextable()
labtitle<-title_table_format(labtitle) 

#get lab data
lab_epicurve <- lab_nat_tbl %>% 
    filter(testpos_date<=max(testpos_date,na.rm=TRUE)) %>% 
    filter(testpos_date>=as.Date("2020-03-14",format="%Y-%m-%d"))%>%
mutate(
  #remove the character "," in testvol_cum
  testvol_cum=gsub(",","",testvol_cum),
  #remove the character "," in testvol_avg
  testvol_avg=gsub(",","",testvol_avg),
  #remove the character "%" in testpos_avg
  testpos_avg=gsub("%","",testpos_avg))%>%
mutate(
       #convert the type of testvol_cum to double
       testvol_cum=as.double(testvol_cum),
       #convert the type of testvol_avg to double
       testvol_avg=as.double(testvol_avg),
       #convert the type of testpos_avg to numeric
       testpos_avg=as.numeric(testpos_avg)/100,
       #calculate the number of positive tests
       postest=new_test_vol*new_pos/100
    )%>%rename(testpos_average=testpos_avg)%>%
    mutate(
#get the lag date
testvol_avg_date=testpos_date-4,
#prior 7 day avg test volume
testvol_prior_avg7=lag(testvol_avg,order_by = testpos_date,7),
#14 day avg test volume
testvol_avg21=rollmean(new_test_vol,21,align="right", fill = NA),
#prior 14 day avg test volume
testvol_prior_avg21=lag(testvol_avg21,order_by = testpos_date,21),
#percent change of 7 day avg test volume
testvol_change=(testvol_avg-testvol_prior_avg7)/testvol_prior_avg7,
#percent change of 21 day avg test volume
testvol_change21=(testvol_avg21-testvol_prior_avg21)/testvol_prior_avg21,
#weekly test volume
test_cum7=rollsum(new_test_vol,7,align="right",fill=NA),

#14 day avg percent positivity
testpos_average21=rollsum(postest,21,align="right",fill=NA)/
              rollsum(new_test_vol,21,align="right",fill=NA),
#prior 7 day avg percent positivity
testpos_prior_average7=(rollsum(postest,7,align = "right",fill = NA)%>%
                        lag(order_by=testpos_date,n=7))/
                   (rollsum(new_test_vol,7,align = "right",fill = NA)%>%
                        lag(orer_by=testpos_date,7)),
#prior 21 day avg percent positivity
testpos_prior_average21=(rollsum(postest,21,align = "right",fill = NA)%>%
                         lag(order_by=testpos_date,n=21))/
                    (rollsum(new_test_vol,21,align = "right",fill = NA)%>%
                         lag(orer_by=testpos_date,21)),
#percent change of 21 day avg percent positivity
testpos_change21=(testpos_average21-testpos_prior_average21)/testpos_prior_average21,
#percent difference of 7 day avg percent positivity
testpos_difference=100*(testpos_average-testpos_prior_average7),
testpos_difference21=100*(testpos_average21-testpos_prior_average21))
#percent difference of 14 day avg percent positivity

#format lab data      
lab_numbers<-lab_epicurve %>% filter(testpos_date==max(testpos_date,na.rm=TRUE))%>%
mutate(
#format number
testvol_cum = testvol_cum %>% format(big.mark   = ","),
testvol_avg = label_number(big.mark=",",accuracy=1)(testvol_avg),
testvol_prior_avg7 = label_number(big.mark=",",accuracy=1)(testvol_prior_avg7),
testvol_change=label_percent(decimal.mark=".",accuracy = .1)(testvol_change),
testpos_average=label_percent(decimal.mark=".",accuracy = .1)(testpos_average),
testpos_prior_average7=label_percent(decimal.mark=".",accuracy =.1)(testpos_prior_average7),
testpos_difference=label_number(accuracy = .01)(testpos_difference)
       )  

lab_weekly_epicurve<-lab_epicurve %>%filter(wday(testpos_date)==4)%>%
    select(testpos_date,testvol_cum,test_cum7,testvol_avg21,testvol_prior_avg21,testvol_change21,testpos_average,testpos_average21,testpos_prior_average21,testpos_change21,testpos_difference21)%>%rename(lab_new_test=test_cum7,new_pos=testpos_average)


lab_weekly_numbers<-lab_weekly_epicurve%>%filter(testpos_date==max(testpos_date,na.rm=TRUE))%>%
    mutate(testvol_cum = testvol_cum %>% format(big.mark   = ","),
testvol_avg21 = label_number(big.mark=",",accuracy=1)(testvol_avg21),
testvol_prior_avg21 = label_number(big.mark=",",accuracy=1)(testvol_prior_avg21),
testvol_change21=label_percent(decimal.mark=".",accuracy = .1)(testvol_change21),
testpos_average21=label_percent(decimal.mark=".",accuracy = .1)(testpos_average21),
testpos_prior_average21=label_percent(decimal.mark=".",accuracy =.1)(testpos_prior_average21),
testpos_change21=label_percent(decimal.mark=".",accuracy = .1)(testpos_change21),
testpos_difference21=label_number(accuracy = .01)(testpos_difference21))


#define lab numbers function
lab_numbers_list<-function(timeframe){
if (timeframe=="Daily"){
   lab_numbers_exsum(lab_numbers,"Daily") 
  }
else  if (timeframe=="Weekly"|timeframe=="Monthly"){
   lab_numbers_exsum(lab_weekly_numbers,"Weekly")
  }
}
#create lab numbers list
lab_numbers_list<-lab_numbers_list(params$timeframe)

#format lab numbers and save the imagelab_numbers_list
lab_numbers_list<-lab_numbers_list_format_exsum(lab_numbers_list)
labnumbersimg<-save_as_image(lab_numbers_list,path="../../resources/images/labnumbers.png",webshot="webshot2")
labnumbersimg<-readPNG("../../resources/images/labnumbers.png")
labnumbers<-rasterGrob(labnumbersimg)

#get lab weekly data

#define lab peaks function
lab_peaks_list<-function(timeframe){
if (timeframe=="Daily"){

#get each lab peak and combine to form peak table
labpeak1<-lab_peak(lab_epicurve,"2020-06-01","2020-09-01")
labpeak2<-lab_peak(lab_epicurve,"2020-09-01","2021-01-31")
labpeak3<-lab_peak(lab_epicurve,"2021-04-01","2021-05-31")
labpeak4<-lab_peak(lab_epicurve,"2021-07-01","2022-02-28")
labpeak<-labpeak1%>%rbind(labpeak2)%>%rbind(labpeak3)%>%rbind(labpeak4)%>%
    flextable()

#format lab peaks flextable 
labpeak<-add_header_row(x=labpeak,top=TRUE,values=c("S","Single Day","s","7-Day Average","s","Single Day","s","7-Day Average"),colwidths=c(1,2,1,3,2,2,1,3))
labpeak<-add_header_row(x=labpeak,top=TRUE,values=c("Peaks in Single Day and 7-Day Average Percent Positivity","s","Peaks in Single Day and 7-Day Average Test Volume"),colwidths=c(7,1,7))
labpeak<-compose(labpeak,part="header",i=3,j=c(7,15),value=as_paragraph("%Change vs. Current 7-Day Avg"))

  return(labpeak)  
  }
else if(timeframe=="Weekly"|timeframe=="Monthly"){

#get each lab peak and combine to form peak table
labpeak1<-lab_peak(lab_weekly_epicurve,"2020-06-01","2020-09-01")
labpeak2<-lab_peak(lab_weekly_epicurve,"2020-09-01","2021-01-31")
labpeak3<-lab_peak(lab_weekly_epicurve,"2021-04-01","2021-05-31")
labpeak4<-lab_peak(lab_weekly_epicurve,"2021-07-01","2022-02-28")
labpeak<-labpeak1%>%rbind(labpeak2)%>%rbind(labpeak3)%>%rbind(labpeak4)%>%
    flextable()

#format lab peaks flextable 
labpeak<-add_header_row(x=labpeak,top=TRUE,values=c("S","Single Week","s","21-Day Average","s","Single Week","s","21-Day Average"),colwidths=c(1,2,1,3,2,2,1,3))
labpeak<-add_header_row(x=labpeak,top=TRUE,values=c("Peaks in Single Week and 21-Day Average Percent Positivity","s","Peaks in Single Week and 21-Day Average Test Volume"),colwidths=c(7,1,7))
labpeak<-compose(labpeak,part="header",i=3,j=c(7,15),value=as_paragraph("%Change vs. Current 2 Week Avg"))
  return(labpeak)  
  }   
}
#create lab peak
labpeak<-lab_peaks_list(params$timeframe)
#format lab peak
labpeak<-labpeaks_format(labpeak)


lab_epicurve_for_plot<-lab_epicurve%>%select(new_test_vol,testpos_date,testvol_avg,testpos_average)

#get monthly lab data
lab_monthly_epicurve <- lab_epicurve%>%
group_by(month=lubridate::floor_date(testpos_date,'month'))%>%
mutate(lab_cummonth=sum(new_test_vol),
       testpos_average30=sum(postest)/sum(new_test_vol))%>%
select(month,lab_cummonth,testpos_average30)%>%rename(date=month,lab_new=lab_cummonth)%>%ungroup()%>%unique()
#define lab plot function
labdaily_weekly_monthly_plot<-function(timeframe){
   if(timeframe=="Daily"){
dailytestvolumemax<-max(lab_epicurve_for_plot$new_test_vol,na.rm=TRUE)
    #get the maximal daily percent positivity
dailytestposmax<-max(lab_epicurve_for_plot$testpos_average,na.rm=TRUE)
    #get the ratio of the maximal daily test volume over the maximal daily percent positivity
dailyyaxisratio<-dailytestvolumemax/dailytestposmax

plot_exsum(lab_epicurve_for_plot,"Test Volume","Daily","#E1BE6A")+
geom_line(aes(y=testvol_avg, color = "7-Day Avg Daily Test Volume    ", group=1),size=1.3)+
        #add 7 day avg percent positivity line
geom_line(aes(y=testpos_average*dailyyaxisratio, color = "7-Day Avg. Percent Positivity   ",group=1),size=1)+scale_color_manual(" ",values=c("7-Day Avg Daily Test Volume    "="#666666","7-Day Avg. Percent Positivity   "="#40B0A6"))+
        #set the maximal value of y axis and set the secondary y axis
scale_y_continuous(limits=c(0,max(lab_epicurve_for_plot$new_test_vol)*1.3),labels = label_number(big.mark = ","),sec.axis=sec_axis(~./dailyyaxisratio,name="7-Day Avg. Percent Positivity",labels = label_percent(decimal.mark=".",accuracy = 1)))}
   
    else if(timeframe=="Weekly"){
weeklytestvolumemax<-max(lab_weekly_epicurve$lab_new_test,na.rm=TRUE)
    #get the maximal of weekly percent positivity
weeklytestposmax<-max(lab_weekly_epicurve$testpos_average21,na.rm=TRUE)
    #get the ratio of the maximal of weekly test volume over the maximal of weekly percent positivity
weeklyyaxisratio<-weeklytestvolumemax/weeklytestposmax

plot_exsum(lab_weekly_epicurve,"Test Volume","Weekly","#E1BE6A")+
geom_line(aes(y=testvol_avg21*7, color = "21-Day Avg Test Volume   ", group=1),size=1.3)+
        #add 21 day avg percent positivity line
geom_line(aes(y=testpos_average21*weeklyyaxisratio, color = "21-Day Avg. Percent Positivity   ",group=1),size=1)+
scale_color_manual(" ",values=c("21-Day Avg Test Volume   "="#666666","21-Day Avg. Percent Positivity   "="#40B0A6"))+
        #set maximal value of y axis and set the secondary y axis
scale_y_continuous(limits=c(0,max(lab_weekly_epicurve$lab_new_test)*1.3),labels = label_number(big.mark = ","),sec.axis=sec_axis(~./weeklyyaxisratio,name="21-Day Avg. Percent Positivity",labels = label_percent(decimal.mark=".",accuracy = 1)))
        }
   
    else if(timeframe=="Monthly"){
monthlytestvolumemax<-max(lab_monthly_epicurve$lab_new,na.rm=TRUE)
    #get the maximal percent positivity
monthlytestposmax<-max(lab_monthly_epicurve$testpos_avg30,na.rm=TRUE)
    #get the ratio of the maximal monthly test volume over the maximal percent positivity
monthlyyaxisratio<-monthlytestvolumemax/monthlytestposmax
    #plot monthly lab curve
plot_exsum(lab_monthly_epicurve,"Test Volume","Monthly","#E1BE6A")+
geom_line(aes(y=testpos_average30*monthlyyaxisratio, color = "30-Day Avg. Percent Positivity   ",group=1),size=1)+
scale_color_manual(" ",values=c("30-Day Avg. Percent Positivity   "="#40B0A6"))+
        #set the maximal value of y axis and set the secondary y axis
scale_y_continuous(limits=c(0,max(lab_monthly_epicurve$lab_new)*1.3),labels = label_number(big.mark = ","),sec.axis=sec_axis(~./monthlyyaxisratio,name="30-Day Avg. Percent Positivity",labels = label_percent(decimal.mark=".",accuracy = 1)))}
}
#create lab plot
labplot<-labdaily_weekly_monthly_plot(params$timeframe)
#plot lab numbers
labnumbersplot<-ggplot()+theme_void()+ 
    annotation_custom(labnumbers,xmin=-Inf,xmax=Inf,ymin=-Inf,ymax=Inf)
#plot final lab epicurve chart
labfinalplot<-cowplot::plot_grid(labnumbersplot,labplot,ncol=2,rel_widths=c(1,3))

```

```{r warning=FALSE, message=FALSE, echo=FALSE}
labtitle
labpeak
labfinalplot
```

```{r vaccine_summary}}
#| tbl-cap: "vaccine_summary"

juris <- list("AL","AK","AZ","AR","CA","CO","CT",
                      "DE","FL","GA","HI","ID","IL","IN","IA","KS",
                      "KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM",
                      "NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT",
                      "VT","VA","WA","WV","WI","WY","AS","CNMI","DC","FSM","GU","RMI","PW","PR",
                      "USVI")
#get vaccine data  
vax_summary_agg<-read_excel(paste0("C:/Users/",username,"/CDC/Situational Awareness COVID-19 Response - WORKING FOLDER/POWER BI/Data/vaccinations/COVID-TRACKER-AGGREGATES 2022.xlsx"), sheet = "Summary",skip = 1)%>%
              select(LongName,
                     Location,
                     Distributed,
                     Dist_Per_100K,
                     Administered,
                     Admin_Per_100K,
                     Administered_Dose1,
                     Administered_Dose1_Pop_Pct,
                     Series_Complete_Yes,
                     Series_Complete_Pop_Pct)
#filter out not jurisditions
vax_summary_all<-vax_summary_agg%>%filter(!(Location=="BP2")&!(Location=="DD2")&!(Location=="DS2")&!(Location=="IH2")&!(Location=="VA2")&!(Location=="US"))

#filter out territories
vax_summary_state_raw<-vax_summary_agg%>%filter(!(Location=="AS")&!(Location=="BP2")&!(Location=="CNMI")&!(Location=="DC")&!(Location=="DD2")&!(Location=="DS2")&!(Location=="FM")&!(Location=="GU")&!(Location=="IH2")&!(Location=="MH")&!(Location=="MP")&!(Location=="CNMI")&!(Location=="PR")&!(Location=="PW")&!(Location=="US")&!(Location=="VA2")&!(Location=="VI")&!(Location=="CNMI"))%>%
select(-Location)
#sort states
vax_summary_state<-vax_summary_state_raw[order(vax_summary_state_raw$LongName),]
#filter to get the vaccine date of each territory
vax_summary_AS<-vax_summary_agg%>%filter(Location=="AS")%>%select(-Location)
vax_summary_MP<-vax_summary_agg%>%filter(Location=="MP")%>%select(-Location)
vax_summary_DC<-vax_summary_agg%>%filter(Location=="DC")%>%select(-Location)
vax_summary_FM<-vax_summary_agg%>%filter(Location=="FM")%>%select(-Location)
vax_summary_GU<-vax_summary_agg%>%filter(Location=="GU")%>%select(-Location)
vax_summary_MH<-vax_summary_agg%>%filter(Location=="MH")%>%select(-Location)
vax_summary_PW<-vax_summary_agg%>%filter(Location=="PW")%>%select(-Location)
vax_summary_PR<-vax_summary_agg%>%filter(Location=="PR")%>%select(-Location)
vax_summary_VI<-vax_summary_agg%>%filter(Location=="VI")%>%select(-Location)

#get the sum for all the states and territories
vax_summary_all_sum<-vax_summary_all%>%
    summarise(distributed_sum=sum(Distributed),
              administered_sum=sum(Administered),
              administered_dose1_sum=sum(Administered_Dose1),
              series_complete_yes_sum=sum(Series_Complete_Yes)
              )
#get the vaccine data for USA
vax_summary_US<-vax_summary_agg%>%filter(Location=="US")%>%select(-Location)
#get the vaccine data for unspecified
vax_summary_specified<-data.frame(
    LongName="Unspecified",
    Distributed=vax_summary_US$Distributed-vax_summary_all_sum$distributed_sum,
    Dist_Per_100K=NA,
    Administered=vax_summary_US$Administered-vax_summary_all_sum$administered_sum,
    Admin_Per_100K=NA,
    Administered_Dose1=vax_summary_US$Administered_Dose1-vax_summary_all_sum$administered_dose1_sum,
    Administered_Dose1_Pop_Pct=NA,
    Series_Complete_Yes=vax_summary_US$Series_Complete_Yes-vax_summary_all_sum$series_complete_yes_sum,
    Series_Complete_Pop_Pct=NA)

#union the vaccine data of all the states, all the territories, unspecified, and the USA
vax_summary<-vax_summary_state%>%bind_rows(vax_summary_AS)%>%bind_rows(vax_summary_MP)%>%
    bind_rows(vax_summary_DC)%>%bind_rows(vax_summary_FM)%>%bind_rows(vax_summary_GU)%>%
    bind_rows(vax_summary_MH)%>%bind_rows(vax_summary_PW)%>%bind_rows(vax_summary_PR)%>%
    bind_rows(vax_summary_VI)%>%bind_rows(vax_summary_specified)%>%bind_rows(vax_summary_US)

#get different levels of the column Dist_Per_100K, Admin_Per_100K, Administered_Dose1_Pop_Pct, and Series_Complete_Pop_Pct
dist_per_100K_50=(min(vax_summary_all$Dist_Per_100K)+max(vax_summary_all$Dist_Per_100K))/2
dist_per_100K_60=6*(max(vax_summary_all$Dist_Per_100K)+min(vax_summary_all$Dist_Per_100K))/10
dist_per_100K_70=7*(max(vax_summary_all$Dist_Per_100K)+min(vax_summary_all$Dist_Per_100K))/10
dist_per_100K_80=8*(max(vax_summary_all$Dist_Per_100K)+min(vax_summary_all$Dist_Per_100K))/10
dist_per_100K_90=9*(max(vax_summary_all$Dist_Per_100K)+min(vax_summary_all$Dist_Per_100K))/10
admin_per_100K_50=(max(vax_summary_all$Admin_Per_100K)+min(vax_summary_all$Admin_Per_100K))/2
admin_per_100K_60=6*(max(vax_summary_all$Admin_Per_100K)+min(vax_summary_all$Admin_Per_100K))/10
admin_per_100K_70=7*(max(vax_summary_all$Admin_Per_100K)+min(vax_summary_all$Admin_Per_100K))/10
admin_per_100K_80=8*(max(vax_summary_all$Admin_Per_100K)+min(vax_summary_all$Admin_Per_100K))/10
admin_per_100K_90=9*(max(vax_summary_all$Admin_Per_100K)+min(vax_summary_all$Admin_Per_100K))/10
administered_dose1_pop_pct_50=(max(vax_summary_all$Administered_Dose1_Pop_Pct)+
                                   min(vax_summary_all$Administered_Dose1_Pop_Pct))/2
administered_dose1_pop_pct_60=6*(max(vax_summary_all$Administered_Dose1_Pop_Pct)+
                                     min(vax_summary_all$Administered_Dose1_Pop_Pct))/10
administered_dose1_pop_pct_70=7*(max(vax_summary_all$Administered_Dose1_Pop_Pct)+
                                     min(vax_summary_all$Administered_Dose1_Pop_Pct))/10
administered_dose1_pop_pct_80=8*(max(vax_summary_all$Administered_Dose1_Pop_Pct)+
                                     min(vax_summary_all$Administered_Dose1_Pop_Pct))/10
administered_dose1_pop_pct_90=9*(max(vax_summary_all$Administered_Dose1_Pop_Pct)+
                                     min(vax_summary_all$Administered_Dose1_Pop_Pct))/10
series_complete_pop_pct_50=(max(vax_summary_all$Series_Complete_Pop_Pct)+
                                min(vax_summary_all$Series_Complete_Pop_Pct))/2
series_complete_pop_pct_60=6*(max(vax_summary_all$Series_Complete_Pop_Pct)+
                                  min(vax_summary_all$Series_Complete_Pop_Pct))/10
series_complete_pop_pct_70=7*(max(vax_summary_all$Series_Complete_Pop_Pct)+
                                  min(vax_summary_all$Series_Complete_Pop_Pct))/10
series_complete_pop_pct_80=8*(max(vax_summary_all$Series_Complete_Pop_Pct)+
                                  min(vax_summary_all$Series_Complete_Pop_Pct))/10
series_complete_pop_pct_90=9*(max(vax_summary_all$Series_Complete_Pop_Pct)+
                                  min(vax_summary_all$Series_Complete_Pop_Pct))/10

#get flextable of the vaccine data
vax_summary<-vax_summary%>%flextable()

#format the table
#set width and height
vax_summary<-width(vax_summary,j=1,width=1.3)
vax_summary<-width(vax_summary,j=2:9,width=0.9)
vax_summary<-hrule(vax_summary,rule="exact",part="body")
vax_summary<-height(vax_summary,i=1:61,height=0.20)

#set background color of column 3, 5, 7, and 9 according to their value
vax_summary<-bg(vax_summary,~Dist_Per_100K>dist_per_100K_50,~Dist_Per_100K,bg="#cefad0",part="body")
vax_summary<-bg(vax_summary,~Dist_Per_100K>dist_per_100K_60,~Dist_Per_100K,bg="#83f28f",part="body")
vax_summary<-bg(vax_summary,~Dist_Per_100K>dist_per_100K_70,~Dist_Per_100K,bg="#39e75f",part="body")
vax_summary<-bg(vax_summary,~Dist_Per_100K>dist_per_100K_80,~Dist_Per_100K,bg="#00c04b",part="body")
vax_summary<-bg(vax_summary,~Dist_Per_100K>dist_per_100K_90,~Dist_Per_100K,bg="#008631",part="body")
vax_summary<-bg(vax_summary,~Admin_Per_100K>admin_per_100K_50,~Admin_Per_100K,bg="#cefad0",part="body")
vax_summary<-bg(vax_summary,~Admin_Per_100K>admin_per_100K_60,~Admin_Per_100K,bg="#83f28f",part="body")
vax_summary<-bg(vax_summary,~Admin_Per_100K>admin_per_100K_70,~Admin_Per_100K,bg="#39e75f",part="body")
vax_summary<-bg(vax_summary,~Admin_Per_100K>admin_per_100K_80,~Admin_Per_100K,bg="#00c04b",part="body")
vax_summary<-bg(vax_summary,~Admin_Per_100K>admin_per_100K_90,~Admin_Per_100K,bg="#008631",part="body")
vax_summary<-bg(vax_summary,~Administered_Dose1_Pop_Pct>administered_dose1_pop_pct_50,~Administered_Dose1_Pop_Pct,bg="#cefad0",part="body")
vax_summary<-bg(vax_summary,~Administered_Dose1_Pop_Pct>administered_dose1_pop_pct_60,~Administered_Dose1_Pop_Pct,bg="#83f28f",part="body")
vax_summary<-bg(vax_summary,~Administered_Dose1_Pop_Pct>administered_dose1_pop_pct_70,~Administered_Dose1_Pop_Pct,bg="#39e75f",part="body")
vax_summary<-bg(vax_summary,~Administered_Dose1_Pop_Pct>administered_dose1_pop_pct_80,~Administered_Dose1_Pop_Pct,bg="#00c04b",part="body")
vax_summary<-bg(vax_summary,~Administered_Dose1_Pop_Pct>administered_dose1_pop_pct_90,~Administered_Dose1_Pop_Pct,bg="#008631",part="body")
vax_summary<-bg(vax_summary,~Series_Complete_Pop_Pct>series_complete_pop_pct_50,~Series_Complete_Pop_Pct,bg="#cefad0",part="body")
vax_summary<-bg(vax_summary,~Series_Complete_Pop_Pct>series_complete_pop_pct_60,~Series_Complete_Pop_Pct,bg="#83f28f",part="body")
vax_summary<-bg(vax_summary,~Series_Complete_Pop_Pct>series_complete_pop_pct_70,~Series_Complete_Pop_Pct,bg="#39e75f",part="body")
vax_summary<-bg(vax_summary,~Series_Complete_Pop_Pct>series_complete_pop_pct_80,~Series_Complete_Pop_Pct,bg="#00c04b",part="body")
vax_summary<-bg(vax_summary,~Series_Complete_Pop_Pct>series_complete_pop_pct_90,~Series_Complete_Pop_Pct,bg="#008631",part="body")
#rename column names and row names
vax_summary<-compose(vax_summary,part="header",i=1,j=1,value=as_paragraph("State/Territory"))
vax_summary<-compose(vax_summary,part="header",i=1,j=c(2,4,6,8),value=as_paragraph("Total"))
vax_summary<-compose(vax_summary,part="header",i=1,j=c(3,5),value=as_paragraph("Rate/100K Population"))
vax_summary<-compose(vax_summary,part="header",i=1,j=c(7,9),value=as_paragraph("% of Pop."))
vax_summary<-compose(vax_summary,part="body",i=32,j=1,value=as_paragraph("New York"))
vax_summary<-compose(vax_summary,part="body",i=52,j=1,value=as_paragraph("CNMI"))
vax_summary<-compose(vax_summary,part="body",i=54,j=1,value=as_paragraph("FSM"))
vax_summary<-compose(vax_summary,part="body",i=57,j=1,value=as_paragraph("Palau"))
vax_summary<-compose(vax_summary,part="body",i=59,j=1,value=as_paragraph("US Virgiin Islands"))
vax_summary<-compose(vax_summary,part="body",i=61,j=1,value=as_paragraph("USA"))
vax_summary<-compose(vax_summary,part="body",i=60,j=c(3,5,7,9),value=as_paragraph("N/A"))

#add header row
vax_summary<-add_header_row(x=vax_summary,top=TRUE,values=c("State/Territory","Doses Delivered","Doses Administered","People Receiving \U2265 1 Dose","People Fully Vaccinated"),colwidths=c(1,2,2,2,2))
vax_summary<-add_header_row(x=vax_summary,top=TRUE,values=c("COVID-19 Vaccine Distribution and Administration Reported to the CDC"),colwidths=c(9))
vax_summary<-compose(vax_summary,part="header",i=1,j=1,value=as_paragraph("COVID-19 Vaccine Distribution and Administration Reported to the CDC",as_sup("7")))

#add superscript
vax_summary<-compose(vax_summary,part="header",i=2,j=1,value=as_paragraph("State/Territory",as_sup("8")))
vax_summary<-compose(vax_summary,part="header",i=3,j=c(2,4),value=as_paragraph("Total",as_sup("9")))
vax_summary<-compose(vax_summary,part="body",i=60,j=1,value=as_paragraph("Unspecified",as_sup("10")))
vax_summary<-compose(vax_summary,part="body",i=61,j=1,value=as_paragraph("USA",as_sup("11")))
 
#apply theme box to the table  
vax_summary<-theme_box(vax_summary)
 
#set background color
vax_summary<-bg(x=vax_summary,i=2:3,bg="#D9D9D9",part="header")
vax_summary<-bg(x=vax_summary,i=61,bg="#1C696A",part="body")
vax_summary<-bg(x=vax_summary,i=1,j=1,bg="#1C696A",part="header")

#set color
vax_summary<-color(x=vax_summary,i=1,j=1,color="white",part="header")
vax_summary<-color(x=vax_summary,i=61,color="white",part="body")
  
#set align
vax_summary<-align(x=vax_summary,i=1:61,j=c(7,9),align="right",part="body")
vax_summary<-align(x=vax_summary,i=1:61,j=1,align="center",part="body")
vax_summary<-align(x=vax_summary,i=2:3,align="center",part="header")
vax_summary<-align(x=vax_summary,i=1,j=1,align="center",part="header")
   
#set fontsize
vax_summary<-fontsize(x=vax_summary,i=1,j=1,size=10,part="header")
vax_summary<-fontsize(x=vax_summary,i=2:3,size=8,part="header")
vax_summary<-fontsize(x=vax_summary,i=1:61,j=1:9,size=9,part="body")
    
#set bold
vax_summary<-bold(x=vax_summary,i=61,part="body")
vax_summary<-bold(x=vax_summary,i=1:61,j=1,part="body")
#merge cells
vax_summary<-merge_at(x=vax_summary,i=2:3,j=1,part="header")


```

```{r warning=FALSE, message=FALSE, echo=FALSE}
vax_summary
```

N/A=Not available (no data)

Data as of Jul 20, 2022, 06:00 ET; Sources: Data Monitoring and Reporting Section, Vaccine Task Force; [COVID Tracker](https://covid.cdc.gov/covid-data-tracker/#vaccinations_vacc-people-additional-dose-totalpop); US Census[^7][^8][^9][^10]

[^7]: \tiny Green shading indicates higher rates of vaccine delivery or administration relative to other jurisdictions. Rates were calculated based on 2019 US Census data for US States, DC, and Puerto Rico; and based on 2020 US Census data for all other US territories.

[^8]: \tiny CNMI = Commonwealth of the Northern Mariana Islands, FEMA = Federal Emergency Management Agency, FSM = Federated States of Micronesia, HRSA = Health Resources and Services Administration, RMI = Republic of Marshall Islands, and USVI = US Virgin Islands

[^9]: \tiny Doses delivered to and administered in each jurisdiction include doses that were delivered to and administered by federal entities and retail pharmacies. Revisions to delivery data from providers may occur on occasion, resulting in a decrease in doses delivered\] \^\[Unspecified entities include doses delivered or administered by federal agencies outside the US or in unspecified jurisdictions.

[^10]: \tiny The total doses allocated includes data from federal agencies and pharmacies. The total doses delivered or administered by a jurisdiction includes doses delivered to or administered by federal agencies. The US total also includes doses delivered to or administered by federal agencies where the jurisdiction was not specified.

```{r }

```

date)) |>
ggplot(aes(y = new,
x = period)) +
geom_col(fill="blue")  +
geom_line(aes(y = avg, group = group), size=1, color = "green") +
geom_line(aes(y = avg_7, group = group), size=1, color = "orange") +
scale_y_continuous(labels = scales::label_number(big.mark = ","),
sec.axis =  sec_axis( trans=~.*7, name="Second Axis")) +
theme( axis.text.x = element_text(angle = 40,vjust=0.5)) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))
data |>
rename(period := {{period}}) |>
select(date, new, period) |> arrange(date) |>
mutate( avg_holder  = get_mean(new, days = 14),
avg_holder_7  = get_mean(new, days = 7)) |>
group_by(period) |>
summarise(date  = max(date),
new   = sum(new),
avg   = avg_holder [which.max(date)] ,
avg_7   = avg_holder_7 [which.max(date)] ,
group = 'group') |> arrange(date) |>
ungroup() |>
mutate(period = fct_reorder(period,
date)) |>
ggplot(aes(y = new,
x = period)) +
geom_col(fill="blue")  +
geom_line(aes(y = avg, group = group), size=1, color = "green") +
geom_line(aes(y = avg_7, group = group), size=1, color = "orange") +
scale_y_continuous(labels = scales::label_number(big.mark = ","),
sec.axis =  sec_axis( trans=~./7, name="Second Axis")) +
theme( axis.text.x = element_text(angle = 40,vjust=0.5)) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))
data |>
rename(period := {{period}}) |>
select(date, new, period) |> arrange(date) |>
mutate( avg_holder  = get_mean(new, days = 14),
avg_holder_7  = get_mean(new, days = 7)) |>
group_by(period) |>
summarise(date  = max(date),
new   = sum(new),
avg   = avg_holder [which.max(date)] ,
avg_7   = avg_holder_7 [which.max(date)] ,
group = 'group') |> arrange(date) |>
ungroup() |>
mutate(period = fct_reorder(period,
date)) |>
ggplot(aes(y = new,
x = period)) +
geom_col(fill="blue")  +
geom_line(aes(y = avg, group = group), size=1, color = "green") +
geom_line(aes(y = avg_7, group = group), size=1, color = "orange") +
scale_y_continuous(labels = scales::label_number(big.mark = ","),
sec.axis =  sec_axis( trans=~./2, name="Second Axis")) +
theme( axis.text.x = element_text(angle = 40,vjust=0.5)) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))
data |>
rename(period := {{period}}) |>
select(date, new, period) |> arrange(date) |>
mutate( avg_holder  = get_mean(new, days = 14),
avg_holder_7  = get_mean(new, days = 7)) |>
group_by(period) |>
summarise(date  = max(date),
new   = sum(new),
avg   = avg_holder [which.max(date)] ,
avg_7   = avg_holder_7 [which.max(date)] ,
group = 'group') |> arrange(date) |>
ungroup() |>
mutate(period = fct_reorder(period,
date)) |>
ggplot(aes(y = new,
x = period)) +
geom_col(fill="blue")  +
geom_line(aes(y = avg*7, group = group), size=1, color = "green") +
geom_line(aes(y = avg_7*7, group = group), size=1, color = "orange") +
scale_y_continuous(labels = scales::label_number(big.mark = ","),
sec.axis =  sec_axis( trans=~./7, name="Second Axis")) +
theme( axis.text.x = element_text(angle = 40,vjust=0.5)) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))
install.packages('plotly')
library(plotly)
data |>
rename(period := {{period}}) |>
select(date, new, period) |> arrange(date) |>
mutate( avg_holder  = get_mean(new, days = 14),
avg_holder_7  = get_mean(new, days = 7)) |>
group_by(period) |>
summarise(date  = max(date),
new   = sum(new),
avg   = avg_holder [which.max(date)] ,
avg_7   = avg_holder_7 [which.max(date)] ,
group = 'group') |> arrange(date) |>
ungroup() |>
mutate(period = fct_reorder(period,
date)) |>
ggplot(aes(y = new,
x = period)) +
geom_col(fill="blue")  +
geom_line(aes(y = avg*7, group = group), size=1, color = "green") +
geom_line(aes(y = avg_7*7, group = group), size=1, color = "orange") +
scale_y_continuous(labels = scales::label_number(big.mark = ","),
sec.axis =  sec_axis( trans=~./7, name="Second Axis")) +
theme( axis.text.x = element_text(angle = 40,vjust=0.5)) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE)) +
ggplotly()
data |>
rename(period := {{period}}) |>
select(date, new, period) |> arrange(date) |>
mutate( avg_holder  = get_mean(new, days = 14),
avg_holder_7  = get_mean(new, days = 7)) |>
group_by(period) |>
summarise(date  = max(date),
new   = sum(new),
avg   = avg_holder [which.max(date)] ,
avg_7   = avg_holder_7 [which.max(date)] ,
group = 'group') |> arrange(date) |>
ungroup() |>
mutate(period = fct_reorder(period,
date)) |>
ggplot(aes(y = new,
x = period)) +
geom_col(fill="blue")  +
geom_line(aes(y = avg*7, group = group), size=1, color = "green") +
geom_line(aes(y = avg_7*7, group = group), size=1, color = "orange") +
scale_y_continuous(labels = scales::label_number(big.mark = ","),
sec.axis =  sec_axis( trans=~./7, name="Second Axis")) +
theme( axis.text.x = element_text(angle = 40,vjust=0.5)) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))  |>
ggplotly()
?ggplotly
chart <- data |>
rename(period := {{period}}) |>
select(date, new, period) |> arrange(date) |>
mutate( avg_holder  = get_mean(new, days = 14),
avg_holder_7  = get_mean(new, days = 7)) |>
group_by(period) |>
summarise(date  = max(date),
new   = sum(new),
avg   = avg_holder [which.max(date)] ,
avg_7   = avg_holder_7 [which.max(date)] ,
group = 'group') |> arrange(date) |>
ungroup() |>
mutate(period = fct_reorder(period,
date)) |>
ggplot(aes(y = new,
x = period)) +
geom_col(fill="blue")  +
geom_line(aes(y = avg*7, group = group), size=1, color = "green") +
geom_line(aes(y = avg_7*7, group = group), size=1, color = "orange") +
scale_y_continuous(labels = scales::label_number(big.mark = ","),
sec.axis =  sec_axis( trans=~./7, name="Second Axis")) +
theme( axis.text.x = element_text(angle = 40,vjust=0.5)) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))
chart |>
ggplotly()
chart2 <- data |>
rename(period := {{period}}) |>
select(date, new, period) |> arrange(date) |>
mutate( avg_holder  = get_mean(new, days = 14),
avg_holder_7  = get_mean(new, days = 7)) |>
group_by(period) |>
summarise(date  = max(date),
new   = sum(new),
avg   = avg_holder [which.max(date)] ,
avg_7   = avg_holder_7 [which.max(date)] ,
group = 'group') |> arrange(date) |>
ungroup() |>
mutate(period = fct_reorder(period,
date)) |>
ggplot(aes(y = new,
x = period)) +
geom_col(fill="blue")  +
geom_line(aes(y = avg, group = group), size=1, color = "green") +
geom_line(aes(y = avg_7, group = group), size=1, color = "orange") +
scale_y_continuous(labels = scales::label_number(big.mark = ","),
sec.axis =  sec_axis( trans=~./2, name="Second Axis")) +
theme( axis.text.x = element_text(angle = 40,vjust=0.5)) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))
chart2 |>
ggplotly()
chart
data |>
rename(period := {{period}}) |>
select(date, new, period) |> arrange(date) |>
mutate( avg_holder  = get_mean(new, days = avg_range)) |>
group_by(period) |>
summarise(date  = max(date),
new   = sum(new),
avg   = avg_holder [which.max(date)] ,
group = 'group') |> arrange(date) |>
ungroup() |>
mutate(period = fct_reorder(period,
date)) |>
ggplot(aes(y = new,
x = period)) +
geom_col(fill="#f27f27")  +
geom_line(aes(y = avg, group = group), size=1) +
scale_y_continuous(labels = scales::label_number(big.mark = ","),
sec.axis =  sec_axis( trans=~./7, name="14-Day Average")) +
theme( axis.text.x = element_text(angle = 40,vjust=0.5)) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))
timeframe <- "Weekly"
period <- if_else(timeframe == "Daily",  "day_year",
if_else(timeframe == "Weekly", "week_year",
if_else(timeframe == "Monthly", "month_year", "date")))
avg_range <- if_else(timeframe == "Daily",  7,
if_else(timeframe == "Weekly", 14,
if_else(timeframe == "Monthly",0,0)))
data |>
rename(period := {{period}}) |>
select(date, new, period) |> arrange(date) |>
mutate( avg_holder  = get_mean(new, days = avg_range)) |>
group_by(period) |>
summarise(date  = max(date),
new   = sum(new),
avg   = avg_holder [which.max(date)] ,
group = 'group') |> arrange(date) |>
ungroup() |>
mutate(period = fct_reorder(period,
date)) |>
ggplot(aes(y = new,
x = period)) +
geom_col(fill="#f27f27")  +
geom_line(aes(y = avg, group = group), size=1) +
scale_y_continuous(labels = scales::label_number(big.mark = ","),
sec.axis =  sec_axis( trans=~./7, name="14-Day Average")) +
theme( axis.text.x = element_text(angle = 40,vjust=0.5)) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))
l
plot_epi_curve <- function(data_tbl, timeframe, color){
date_col <-  data_tbl |>
select(contains("date")) |>
select(1) |>
colnames()
new_col <-  data_tbl |>
select(contains("new")) |>
select(1) |>
colnames()
data <-  data_tbl |>
rename(date  := {{date_col}},
new   := {{new_col}}) |>
mutate(date       = date  |> lubridate::ymd(),
day        = format(date, "%b %d"),
week       = lubridate::week(date),
month      = lubridate::month(date,
label = TRUE,
abbr = TRUE),
year       = lubridate::year(date),
day_year   = glue::glue('{day}, {year}'),
week_year  = glue::glue('{week}-{year}'),
month_year = glue::glue('{month}-{year}'))
period <- if_else(timeframe == "Daily",  "day_year",
if_else(timeframe == "Weekly", "week_year",
if_else(timeframe == "Monthly", "month_year", "date")))
avg_range <- if_else(timeframe == "Daily",  7,
if_else(timeframe == "Weekly", 14,
if_else(timeframe == "Monthly",0,0)))
data |>
rename(period := {{period}}) |>
select(date, new, period) |> arrange(date) |>
mutate( avg_holder  = get_mean(new, days = avg_range)) |>
group_by(period) |>
summarise(date  = max(date),
new   = sum(new),
avg   = avg_holder [which.max(date)] ,
group = 'group') |> arrange(date) |>
ungroup() |>
mutate(period = fct_reorder(period,
date)) |>
ggplot(aes(y = new,
x = period)) +
geom_col(fill=color)  +
geom_line(aes(y = avg, group = group), size=1) +
# scale_y_continuous(labels = scales::label_number(big.mark = ","),
#                    sec.axis =  sec_axis( trans=~./7, name="14-Day Average")) +
theme( axis.text.x = element_text(angle = 40,vjust=0.5)) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))
}
plot_epi_curve(hosp_juris_tbl, "Weekly", "Red")
hosp_juris_tbl |>
select(contains("date")) |>
select(1) |>
colnames()
hosp_juris_tbl |>
select(contains("date"))
hosp_juris_tbl |>
select(contains("date")) |>
select(1)
hosp_juris_tbl |>
select(contains("date"))
hosp_juris_tbl
hosp_juris_tbl |>
select(contains("date"))
#' @param date_column name of date column to be renamed
#' @param state_abbr name of column with state and territory abbreviations to be renamed and standardize abbreviations
#' @param start_date first day date to filter
#' @param lag number of days to remove from the most recent date
#' @export
#' @import dplyr
#' @return returns aggregate hospital table with metrics
#' @export
#'
#' @examples
get_hosp_juris_tbl <- function(username,
date_column = "collection_date",
state_abbr  = 'state',
lag         = 2,
start_date  = "2020-01-01"){
pop <- readr::read_rds(here::here("data/pop.rds"))
read_csv(paste0("C:/Users/",
username,
"/CDC/Situational Awareness COVID-19 Response - WORKING FOLDER/HOSPITAL DATA/hospitals_state_daily_incident_management.csv"),
guess_max = 3000,
show_col_types = FALSE)  |>
clean_raw_data(date_column = date_column,
state_abbr  = state_abbr,
lag         = lag,
start_date  = start_date) |>
select(juris,
date,
adm_all_covid_confirmed,
avg_adm_all_covid_confirmed
) |>
mutate(hosp_adm    = adm_all_covid_confirmed,
hosp_cum    = cumsum(hosp_adm),
hosp_avg    = avg_adm_all_covid_confirmed |> round(),
hosp_new    = adm_all_covid_confirmed) |>
group_by(date,juris) |>
summarise(
hosp_cum = hosp_cum %>% format(justify  = "right",
big.mark = ","),
hosp_new = hosp_new,
hosp_avg = hosp_avg
) |>
ungroup() |>
left_join(pop) |>
group_by(juris) |>
mutate(
hosp_change = get_per_change(hosp_avg, date),
hosp_7cum   = get_juris_7day_cum_per_100k(hosp_new, pop = pop)
) |>
ungroup() |>
rename(hosp_date = date)
}
plot_epi_curve <- function(data_tbl, timeframe, color){
date_col <-  data_tbl |>
select(contains("date")) |>
select(1) |>
colnames()
new_col <-  data_tbl |>
select(contains("new")) |>
select(1) |>
colnames()
data <-  data_tbl |>
rename(date  := {{date_col}},
new   := {{new_col}}) |>
mutate(date       = date  |> lubridate::ymd(),
day        = format(date, "%b %d"),
week       = lubridate::week(date),
month      = lubridate::month(date,
label = TRUE,
abbr = TRUE),
year       = lubridate::year(date),
day_year   = glue::glue('{day}, {year}'),
week_year  = glue::glue('{week}-{year}'),
month_year = glue::glue('{month}-{year}'))
period <- if_else(timeframe == "Daily",  "day_year",
if_else(timeframe == "Weekly", "week_year",
if_else(timeframe == "Monthly", "month_year", "date")))
avg_range <- if_else(timeframe == "Daily",  7,
if_else(timeframe == "Weekly", 14,
if_else(timeframe == "Monthly",0,0)))
data |>
rename(period := {{period}}) |>
select(date, new, period) |> arrange(date) |>
mutate( avg_holder  = get_mean(new, days = avg_range)) |>
group_by(period) |>
summarise(date  = max(date),
new   = sum(new),
avg   = avg_holder [which.max(date)] ,
group = 'group') |> arrange(date) |>
ungroup() |>
mutate(period = fct_reorder(period,
date)) |>
ggplot(aes(y = new,
x = period)) +
geom_col(fill=color)  +
geom_line(aes(y = avg, group = group), size=1) +
# scale_y_continuous(labels = scales::label_number(big.mark = ","),
#                    sec.axis =  sec_axis( trans=~./7, name="14-Day Average")) +
theme( axis.text.x = element_text(angle = 40,vjust=0.5)) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))
}
get_case_death_juris_tbl(username = params$username) |>
mutate(cases_date = lubridate::ymd(cases_date)) |>
write_rds(here::here("data/cases_deaths_tbl.rds"))
get_hosp_juris_tbl(username = params$username) |>
write_rds(here::here("data/hosp_juris_tbl.rds"))
get_lab_juris_tbl(username = params$username)|>
write_rds( here::here("data/lab_juris_tbl.rds"))
case_death_juris_tbl <- read_rds(here::here("data/cases_deaths_tbl.rds")) |>
filter(juris == params$juris)
hosp_juris_tbl       <- read_rds(here::here("data/hosp_juris_tbl.rds"))|>
filter(juris == params$juris)
lab_juris_tbl        <- read_rds(here::here("data/lab_juris_tbl.rds"))|>
filter(juris == params$juris)
plot_epi_curve(hosp_juris_tbl, "Weekly", "Red")
plot_epi_curve(hosp_juris_tbl, "Daily", "Red")
plot_epi_curve(hosp_juris_tbl, "Monthly", "Red")
plot_epi_curve(hosp_juris_tbl, "Daily", "Red")
plot_epi_curve(hosp_juris_tbl, "Weekly", "Red")
case_death_juris_tbl
read_rds(here::here("data/cases_deaths_tbl.rds")) |>
filter(juris == params$juris) |>
select(!contains("deaths"))
table_bind <- bind_cols(case_juris_tbl |>
filter(cases_date ==max(cases_date)),
death_juris_tbl |>
filter(deaths_date == max(deaths_date)),
hosp_juris_tbl|> filter(hosp_date ==max(hosp_date)),
lab_juris_tbl|> filter(testpos_date ==max(testpos_date)))
case_juris_tbl <- read_rds(here::here("data/cases_deaths_tbl.rds")) |>
filter(juris == params$juris) |>
select(!contains("deaths"))
death_juris_tbl <- read_rds(here::here("data/cases_deaths_tbl.rds")) |>
filter(juris == params$juris) |>
select(!contains("cases"))
hosp_juris_tbl       <- read_rds(here::here("data/hosp_juris_tbl.rds"))|>
filter(juris == params$juris)
lab_juris_tbl        <- read_rds(here::here("data/lab_juris_tbl.rds"))|>
filter(juris == params$juris)
table_bind <- bind_cols(case_juris_tbl |>
filter(cases_date ==max(cases_date)),
death_juris_tbl |>
filter(deaths_date == max(deaths_date)),
hosp_juris_tbl|> filter(hosp_date ==max(hosp_date)),
lab_juris_tbl|> filter(testpos_date ==max(testpos_date)))
table_bind
plot_epi_curve(death_juris_tbl, params$timeframe, "Red")
plot_epi_curve(lab_juris_tbl, params$timeframe, "#e3de42")
plot_epi_curve(hosp_juris_tbl, params$timeframe, "#f27f27")
plot_epi_curve(case_juris_tbl, params$timeframe, "#440154FF")
plot_epi_curve <- function(data_tbl, timeframe, color){
date_col <-  data_tbl |>
select(contains("date")) |>
select(1) |>
colnames()
new_col <-  data_tbl |>
select(contains("new")) |>
select(1) |>
colnames()
data <-  data_tbl |>
rename(date  := {{date_col}},
new   := {{new_col}}) |>
mutate(date       = date  |> lubridate::ymd(),
day        = format(date, "%b %d"),
week       = lubridate::week(date),
month      = lubridate::month(date,
label = TRUE,
abbr = TRUE),
year       = lubridate::year(date),
day_year   = glue::glue('{day}, {year}'),
week_year  = glue::glue('{week}-{year}'),
month_year = glue::glue('{month}-{year}'))
period <- if_else(timeframe == "Daily",  "day_year",
if_else(timeframe == "Weekly", "week_year",
if_else(timeframe == "Monthly", "month_year", "date")))
avg_range <- if_else(timeframe == "Daily",  7,
if_else(timeframe == "Weekly", 14,
if_else(timeframe == "Monthly",0,0)))
prepped_data <-  data |>
rename(period := {{period}}) |>
select(date, new, period) |> arrange(date) |>
mutate( avg_holder  = get_mean(new, days = avg_range)) |>
group_by(period) |>
summarise(date  = max(date),
new   = sum(new),
avg   = avg_holder [which.max(date)] ,
group = 'group') |> arrange(date) |>
ungroup() |>
mutate(period = fct_reorder(period,
date))
ylimit <- max(prepped_data$new) * 1.1
prepped_data |>
ggplot(aes(y = new,
x = period)) +
geom_col(fill=color)  +
geom_line(aes(y = avg, group = group), size=1) +
scale_y_continuous(labels = scales::label_number(big.mark = ","),
#                    sec.axis =  sec_axis( trans=~./7, name="14-Day Average"),
limits = c(0, ylimit)) +
theme( axis.text.x = element_text(angle = 40,vjust=0.5)) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))
}
#'
#' @param column column to calculate mean
#' @param days date range, number of days to calculate mean
#'
#' @return mean column
#'
#' @export
#'
#' @examples
#'
get_mean <- function(column,
days = 7){
column %>%
zoo::rollmean(days,
align = "right",
fill = 0)
}
devtools::check()
